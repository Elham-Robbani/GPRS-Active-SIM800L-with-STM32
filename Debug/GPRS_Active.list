
GPRS_Active.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030c4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  080031d0  080031d0  000131d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003438  08003438  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003438  08003438  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003438  08003438  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003438  08003438  00013438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800343c  0800343c  0001343c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000070  080034b0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  080034b0  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005748  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001497  00000000  00000000  000257e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  00026c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000638  00000000  00000000  00027338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176e8  00000000  00000000  00027970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000070ca  00000000  00000000  0003f058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000834eb  00000000  00000000  00046122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c960d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023b0  00000000  00000000  000c9660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080031b8 	.word	0x080031b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080031b8 	.word	0x080031b8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800016c:	f003 0301 	and.w	r3, r3, #1
 8000170:	2b00      	cmp	r3, #0
 8000172:	d013      	beq.n	800019c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000174:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000178:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800017c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000180:	2b00      	cmp	r3, #0
 8000182:	d00b      	beq.n	800019c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000184:	e000      	b.n	8000188 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000186:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000188:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d0f9      	beq.n	8000186 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000192:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000196:	687a      	ldr	r2, [r7, #4]
 8000198:	b2d2      	uxtb	r2, r2
 800019a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800019c:	687b      	ldr	r3, [r7, #4]
}
 800019e:	4618      	mov	r0, r3
 80001a0:	370c      	adds	r7, #12
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b086      	sub	sp, #24
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	60f8      	str	r0, [r7, #12]
 80001b0:	60b9      	str	r1, [r7, #8]
 80001b2:	607a      	str	r2, [r7, #4]
	int i=0;
 80001b4:	2300      	movs	r3, #0
 80001b6:	617b      	str	r3, [r7, #20]
	for(i=0 ; i<len ; i++)
 80001b8:	2300      	movs	r3, #0
 80001ba:	617b      	str	r3, [r7, #20]
 80001bc:	e009      	b.n	80001d2 <_write+0x2a>
		ITM_SendChar((*ptr++));
 80001be:	68bb      	ldr	r3, [r7, #8]
 80001c0:	1c5a      	adds	r2, r3, #1
 80001c2:	60ba      	str	r2, [r7, #8]
 80001c4:	781b      	ldrb	r3, [r3, #0]
 80001c6:	4618      	mov	r0, r3
 80001c8:	f7ff ffc8 	bl	800015c <ITM_SendChar>
	for(i=0 ; i<len ; i++)
 80001cc:	697b      	ldr	r3, [r7, #20]
 80001ce:	3301      	adds	r3, #1
 80001d0:	617b      	str	r3, [r7, #20]
 80001d2:	697a      	ldr	r2, [r7, #20]
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	429a      	cmp	r2, r3
 80001d8:	dbf1      	blt.n	80001be <_write+0x16>
	return len;
 80001da:	687b      	ldr	r3, [r7, #4]
}
 80001dc:	4618      	mov	r0, r3
 80001de:	3718      	adds	r7, #24
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}

080001e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e8:	f000 fccc 	bl	8000b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ec:	f000 faf4 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f0:	f000 fb58 	bl	80008a4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001f4:	f000 fb2c 	bl	8000850 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

    while(!ATisOK){
 80001f8:	e02b      	b.n	8000252 <main+0x6e>
    		sprintf(ATcommand,"AT\r\n");
 80001fa:	49b9      	ldr	r1, [pc, #740]	; (80004e0 <main+0x2fc>)
 80001fc:	48b9      	ldr	r0, [pc, #740]	; (80004e4 <main+0x300>)
 80001fe:	f001 fe6d 	bl	8001edc <siprintf>
    		HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000202:	48b8      	ldr	r0, [pc, #736]	; (80004e4 <main+0x300>)
 8000204:	f7ff ffa2 	bl	800014c <strlen>
 8000208:	4603      	mov	r3, r0
 800020a:	b29a      	uxth	r2, r3
 800020c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000210:	49b4      	ldr	r1, [pc, #720]	; (80004e4 <main+0x300>)
 8000212:	48b5      	ldr	r0, [pc, #724]	; (80004e8 <main+0x304>)
 8000214:	f001 fc0b 	bl	8001a2e <HAL_UART_Transmit>
    		HAL_UART_Receive (&huart1, buffer, 30, 100);
 8000218:	2364      	movs	r3, #100	; 0x64
 800021a:	221e      	movs	r2, #30
 800021c:	49b3      	ldr	r1, [pc, #716]	; (80004ec <main+0x308>)
 800021e:	48b2      	ldr	r0, [pc, #712]	; (80004e8 <main+0x304>)
 8000220:	f001 fc97 	bl	8001b52 <HAL_UART_Receive>
    		HAL_Delay(1000);
 8000224:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000228:	f000 fd0e 	bl	8000c48 <HAL_Delay>
    		if(strstr((char *)buffer,"OK")){
 800022c:	49b0      	ldr	r1, [pc, #704]	; (80004f0 <main+0x30c>)
 800022e:	48af      	ldr	r0, [pc, #700]	; (80004ec <main+0x308>)
 8000230:	f001 fe74 	bl	8001f1c <strstr>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d002      	beq.n	8000240 <main+0x5c>
    			ATisOK = 1;
 800023a:	4bae      	ldr	r3, [pc, #696]	; (80004f4 <main+0x310>)
 800023c:	2201      	movs	r2, #1
 800023e:	701a      	strb	r2, [r3, #0]
    		}
    		HAL_Delay(1000);
 8000240:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000244:	f000 fd00 	bl	8000c48 <HAL_Delay>
    		memset(buffer,0,sizeof(buffer));
 8000248:	2264      	movs	r2, #100	; 0x64
 800024a:	2100      	movs	r1, #0
 800024c:	48a7      	ldr	r0, [pc, #668]	; (80004ec <main+0x308>)
 800024e:	f001 fe25 	bl	8001e9c <memset>
    while(!ATisOK){
 8000252:	4ba8      	ldr	r3, [pc, #672]	; (80004f4 <main+0x310>)
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d0cf      	beq.n	80001fa <main+0x16>
    }

            //*GPRS ACTIVE CODE START*//

    sprintf(ATcommand,"AT+CMGF=1\r\n");
 800025a:	49a7      	ldr	r1, [pc, #668]	; (80004f8 <main+0x314>)
 800025c:	48a1      	ldr	r0, [pc, #644]	; (80004e4 <main+0x300>)
 800025e:	f001 fe3d 	bl	8001edc <siprintf>
    HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000262:	48a0      	ldr	r0, [pc, #640]	; (80004e4 <main+0x300>)
 8000264:	f7ff ff72 	bl	800014c <strlen>
 8000268:	4603      	mov	r3, r0
 800026a:	b29a      	uxth	r2, r3
 800026c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000270:	499c      	ldr	r1, [pc, #624]	; (80004e4 <main+0x300>)
 8000272:	489d      	ldr	r0, [pc, #628]	; (80004e8 <main+0x304>)
 8000274:	f001 fbdb 	bl	8001a2e <HAL_UART_Transmit>
    HAL_UART_Receive (&huart1, buffer, 30, 100);
 8000278:	2364      	movs	r3, #100	; 0x64
 800027a:	221e      	movs	r2, #30
 800027c:	499b      	ldr	r1, [pc, #620]	; (80004ec <main+0x308>)
 800027e:	489a      	ldr	r0, [pc, #616]	; (80004e8 <main+0x304>)
 8000280:	f001 fc67 	bl	8001b52 <HAL_UART_Receive>
    HAL_Delay(100);
 8000284:	2064      	movs	r0, #100	; 0x64
 8000286:	f000 fcdf 	bl	8000c48 <HAL_Delay>
    count++;
 800028a:	4b9c      	ldr	r3, [pc, #624]	; (80004fc <main+0x318>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	3301      	adds	r3, #1
 8000290:	b2da      	uxtb	r2, r3
 8000292:	4b9a      	ldr	r3, [pc, #616]	; (80004fc <main+0x318>)
 8000294:	701a      	strb	r2, [r3, #0]
    printf ("Check point count = %d,\n ", count);
 8000296:	4b99      	ldr	r3, [pc, #612]	; (80004fc <main+0x318>)
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	4619      	mov	r1, r3
 800029c:	4898      	ldr	r0, [pc, #608]	; (8000500 <main+0x31c>)
 800029e:	f001 fe05 	bl	8001eac <iprintf>
    HAL_Delay(100);
 80002a2:	2064      	movs	r0, #100	; 0x64
 80002a4:	f000 fcd0 	bl	8000c48 <HAL_Delay>

    memset(buffer,0,sizeof(buffer));
 80002a8:	2264      	movs	r2, #100	; 0x64
 80002aa:	2100      	movs	r1, #0
 80002ac:	488f      	ldr	r0, [pc, #572]	; (80004ec <main+0x308>)
 80002ae:	f001 fdf5 	bl	8001e9c <memset>
    sprintf(ATcommand,"AT+CHIPSHUT\r\n");
 80002b2:	4994      	ldr	r1, [pc, #592]	; (8000504 <main+0x320>)
 80002b4:	488b      	ldr	r0, [pc, #556]	; (80004e4 <main+0x300>)
 80002b6:	f001 fe11 	bl	8001edc <siprintf>
    HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 80002ba:	488a      	ldr	r0, [pc, #552]	; (80004e4 <main+0x300>)
 80002bc:	f7ff ff46 	bl	800014c <strlen>
 80002c0:	4603      	mov	r3, r0
 80002c2:	b29a      	uxth	r2, r3
 80002c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002c8:	4986      	ldr	r1, [pc, #536]	; (80004e4 <main+0x300>)
 80002ca:	4887      	ldr	r0, [pc, #540]	; (80004e8 <main+0x304>)
 80002cc:	f001 fbaf 	bl	8001a2e <HAL_UART_Transmit>
    HAL_Delay(100);
 80002d0:	2064      	movs	r0, #100	; 0x64
 80002d2:	f000 fcb9 	bl	8000c48 <HAL_Delay>
    count++;
 80002d6:	4b89      	ldr	r3, [pc, #548]	; (80004fc <main+0x318>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	3301      	adds	r3, #1
 80002dc:	b2da      	uxtb	r2, r3
 80002de:	4b87      	ldr	r3, [pc, #540]	; (80004fc <main+0x318>)
 80002e0:	701a      	strb	r2, [r3, #0]
    printf ("Check point count = %d,\n ", count);
 80002e2:	4b86      	ldr	r3, [pc, #536]	; (80004fc <main+0x318>)
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	4619      	mov	r1, r3
 80002e8:	4885      	ldr	r0, [pc, #532]	; (8000500 <main+0x31c>)
 80002ea:	f001 fddf 	bl	8001eac <iprintf>
    HAL_Delay(100);
 80002ee:	2064      	movs	r0, #100	; 0x64
 80002f0:	f000 fcaa 	bl	8000c48 <HAL_Delay>

    memset(buffer,0,sizeof(buffer));
 80002f4:	2264      	movs	r2, #100	; 0x64
 80002f6:	2100      	movs	r1, #0
 80002f8:	487c      	ldr	r0, [pc, #496]	; (80004ec <main+0x308>)
 80002fa:	f001 fdcf 	bl	8001e9c <memset>
        sprintf(ATcommand,"AT+CGATT=1\r\n");
 80002fe:	4982      	ldr	r1, [pc, #520]	; (8000508 <main+0x324>)
 8000300:	4878      	ldr	r0, [pc, #480]	; (80004e4 <main+0x300>)
 8000302:	f001 fdeb 	bl	8001edc <siprintf>
        HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000306:	4877      	ldr	r0, [pc, #476]	; (80004e4 <main+0x300>)
 8000308:	f7ff ff20 	bl	800014c <strlen>
 800030c:	4603      	mov	r3, r0
 800030e:	b29a      	uxth	r2, r3
 8000310:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000314:	4973      	ldr	r1, [pc, #460]	; (80004e4 <main+0x300>)
 8000316:	4874      	ldr	r0, [pc, #464]	; (80004e8 <main+0x304>)
 8000318:	f001 fb89 	bl	8001a2e <HAL_UART_Transmit>
        HAL_Delay(100);
 800031c:	2064      	movs	r0, #100	; 0x64
 800031e:	f000 fc93 	bl	8000c48 <HAL_Delay>
	count++;
 8000322:	4b76      	ldr	r3, [pc, #472]	; (80004fc <main+0x318>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	3301      	adds	r3, #1
 8000328:	b2da      	uxtb	r2, r3
 800032a:	4b74      	ldr	r3, [pc, #464]	; (80004fc <main+0x318>)
 800032c:	701a      	strb	r2, [r3, #0]
	   printf ("Check point count = %d,\n ", count);
 800032e:	4b73      	ldr	r3, [pc, #460]	; (80004fc <main+0x318>)
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	4619      	mov	r1, r3
 8000334:	4872      	ldr	r0, [pc, #456]	; (8000500 <main+0x31c>)
 8000336:	f001 fdb9 	bl	8001eac <iprintf>
	   HAL_Delay(100);
 800033a:	2064      	movs	r0, #100	; 0x64
 800033c:	f000 fc84 	bl	8000c48 <HAL_Delay>

    memset(buffer,0,sizeof(buffer));
 8000340:	2264      	movs	r2, #100	; 0x64
 8000342:	2100      	movs	r1, #0
 8000344:	4869      	ldr	r0, [pc, #420]	; (80004ec <main+0x308>)
 8000346:	f001 fda9 	bl	8001e9c <memset>
	    sprintf(ATcommand,"AT+SAPBR=3,1,\"CONTYPE\",\"GPRS\"\r\n");
 800034a:	4970      	ldr	r1, [pc, #448]	; (800050c <main+0x328>)
 800034c:	4865      	ldr	r0, [pc, #404]	; (80004e4 <main+0x300>)
 800034e:	f001 fdc5 	bl	8001edc <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000352:	4864      	ldr	r0, [pc, #400]	; (80004e4 <main+0x300>)
 8000354:	f7ff fefa 	bl	800014c <strlen>
 8000358:	4603      	mov	r3, r0
 800035a:	b29a      	uxth	r2, r3
 800035c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000360:	4960      	ldr	r1, [pc, #384]	; (80004e4 <main+0x300>)
 8000362:	4861      	ldr	r0, [pc, #388]	; (80004e8 <main+0x304>)
 8000364:	f001 fb63 	bl	8001a2e <HAL_UART_Transmit>
		HAL_Delay(100);
 8000368:	2064      	movs	r0, #100	; 0x64
 800036a:	f000 fc6d 	bl	8000c48 <HAL_Delay>
	 count++;
 800036e:	4b63      	ldr	r3, [pc, #396]	; (80004fc <main+0x318>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	3301      	adds	r3, #1
 8000374:	b2da      	uxtb	r2, r3
 8000376:	4b61      	ldr	r3, [pc, #388]	; (80004fc <main+0x318>)
 8000378:	701a      	strb	r2, [r3, #0]
		printf ("Check point count = %d,\n ", count);
 800037a:	4b60      	ldr	r3, [pc, #384]	; (80004fc <main+0x318>)
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	4619      	mov	r1, r3
 8000380:	485f      	ldr	r0, [pc, #380]	; (8000500 <main+0x31c>)
 8000382:	f001 fd93 	bl	8001eac <iprintf>
		HAL_Delay(100);
 8000386:	2064      	movs	r0, #100	; 0x64
 8000388:	f000 fc5e 	bl	8000c48 <HAL_Delay>

    memset(buffer,0,sizeof(buffer));
 800038c:	2264      	movs	r2, #100	; 0x64
 800038e:	2100      	movs	r1, #0
 8000390:	4856      	ldr	r0, [pc, #344]	; (80004ec <main+0x308>)
 8000392:	f001 fd83 	bl	8001e9c <memset>
		sprintf(ATcommand,"AT+SAPBR=3,1,\"APN\",\"CMNET\"\r\n");
 8000396:	495e      	ldr	r1, [pc, #376]	; (8000510 <main+0x32c>)
 8000398:	4852      	ldr	r0, [pc, #328]	; (80004e4 <main+0x300>)
 800039a:	f001 fd9f 	bl	8001edc <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 800039e:	4851      	ldr	r0, [pc, #324]	; (80004e4 <main+0x300>)
 80003a0:	f7ff fed4 	bl	800014c <strlen>
 80003a4:	4603      	mov	r3, r0
 80003a6:	b29a      	uxth	r2, r3
 80003a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003ac:	494d      	ldr	r1, [pc, #308]	; (80004e4 <main+0x300>)
 80003ae:	484e      	ldr	r0, [pc, #312]	; (80004e8 <main+0x304>)
 80003b0:	f001 fb3d 	bl	8001a2e <HAL_UART_Transmit>
		HAL_Delay(100);
 80003b4:	2064      	movs	r0, #100	; 0x64
 80003b6:	f000 fc47 	bl	8000c48 <HAL_Delay>
		 count++;
 80003ba:	4b50      	ldr	r3, [pc, #320]	; (80004fc <main+0x318>)
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	3301      	adds	r3, #1
 80003c0:	b2da      	uxtb	r2, r3
 80003c2:	4b4e      	ldr	r3, [pc, #312]	; (80004fc <main+0x318>)
 80003c4:	701a      	strb	r2, [r3, #0]
		    printf ("Check point count = %d,\n ", count);
 80003c6:	4b4d      	ldr	r3, [pc, #308]	; (80004fc <main+0x318>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	4619      	mov	r1, r3
 80003cc:	484c      	ldr	r0, [pc, #304]	; (8000500 <main+0x31c>)
 80003ce:	f001 fd6d 	bl	8001eac <iprintf>
		    HAL_Delay(100);
 80003d2:	2064      	movs	r0, #100	; 0x64
 80003d4:	f000 fc38 	bl	8000c48 <HAL_Delay>

    memset(buffer,0,sizeof(buffer));
 80003d8:	2264      	movs	r2, #100	; 0x64
 80003da:	2100      	movs	r1, #0
 80003dc:	4843      	ldr	r0, [pc, #268]	; (80004ec <main+0x308>)
 80003de:	f001 fd5d 	bl	8001e9c <memset>
		sprintf(ATcommand,"AT+CSTT=Tespack\r\n");
 80003e2:	494c      	ldr	r1, [pc, #304]	; (8000514 <main+0x330>)
 80003e4:	483f      	ldr	r0, [pc, #252]	; (80004e4 <main+0x300>)
 80003e6:	f001 fd79 	bl	8001edc <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 80003ea:	483e      	ldr	r0, [pc, #248]	; (80004e4 <main+0x300>)
 80003ec:	f7ff feae 	bl	800014c <strlen>
 80003f0:	4603      	mov	r3, r0
 80003f2:	b29a      	uxth	r2, r3
 80003f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003f8:	493a      	ldr	r1, [pc, #232]	; (80004e4 <main+0x300>)
 80003fa:	483b      	ldr	r0, [pc, #236]	; (80004e8 <main+0x304>)
 80003fc:	f001 fb17 	bl	8001a2e <HAL_UART_Transmit>
		HAL_Delay(100);
 8000400:	2064      	movs	r0, #100	; 0x64
 8000402:	f000 fc21 	bl	8000c48 <HAL_Delay>
		 count++;
 8000406:	4b3d      	ldr	r3, [pc, #244]	; (80004fc <main+0x318>)
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	3301      	adds	r3, #1
 800040c:	b2da      	uxtb	r2, r3
 800040e:	4b3b      	ldr	r3, [pc, #236]	; (80004fc <main+0x318>)
 8000410:	701a      	strb	r2, [r3, #0]
		    printf ("Check point count = %d,\n ", count);
 8000412:	4b3a      	ldr	r3, [pc, #232]	; (80004fc <main+0x318>)
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	4619      	mov	r1, r3
 8000418:	4839      	ldr	r0, [pc, #228]	; (8000500 <main+0x31c>)
 800041a:	f001 fd47 	bl	8001eac <iprintf>
		    HAL_Delay(100);
 800041e:	2064      	movs	r0, #100	; 0x64
 8000420:	f000 fc12 	bl	8000c48 <HAL_Delay>

    memset(buffer,0,sizeof(buffer));
 8000424:	2264      	movs	r2, #100	; 0x64
 8000426:	2100      	movs	r1, #0
 8000428:	4830      	ldr	r0, [pc, #192]	; (80004ec <main+0x308>)
 800042a:	f001 fd37 	bl	8001e9c <memset>
 		sprintf(ATcommand,"AT+SAPBR=1,1\r\n");
 800042e:	493a      	ldr	r1, [pc, #232]	; (8000518 <main+0x334>)
 8000430:	482c      	ldr	r0, [pc, #176]	; (80004e4 <main+0x300>)
 8000432:	f001 fd53 	bl	8001edc <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000436:	482b      	ldr	r0, [pc, #172]	; (80004e4 <main+0x300>)
 8000438:	f7ff fe88 	bl	800014c <strlen>
 800043c:	4603      	mov	r3, r0
 800043e:	b29a      	uxth	r2, r3
 8000440:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000444:	4927      	ldr	r1, [pc, #156]	; (80004e4 <main+0x300>)
 8000446:	4828      	ldr	r0, [pc, #160]	; (80004e8 <main+0x304>)
 8000448:	f001 faf1 	bl	8001a2e <HAL_UART_Transmit>
		HAL_Delay(100);
 800044c:	2064      	movs	r0, #100	; 0x64
 800044e:	f000 fbfb 	bl	8000c48 <HAL_Delay>
		 count++;
 8000452:	4b2a      	ldr	r3, [pc, #168]	; (80004fc <main+0x318>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	3301      	adds	r3, #1
 8000458:	b2da      	uxtb	r2, r3
 800045a:	4b28      	ldr	r3, [pc, #160]	; (80004fc <main+0x318>)
 800045c:	701a      	strb	r2, [r3, #0]
		    printf ("Check point count = %d,\n ", count);
 800045e:	4b27      	ldr	r3, [pc, #156]	; (80004fc <main+0x318>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	4619      	mov	r1, r3
 8000464:	4826      	ldr	r0, [pc, #152]	; (8000500 <main+0x31c>)
 8000466:	f001 fd21 	bl	8001eac <iprintf>
		    HAL_Delay(100);
 800046a:	2064      	movs	r0, #100	; 0x64
 800046c:	f000 fbec 	bl	8000c48 <HAL_Delay>

    memset(buffer,0,sizeof(buffer));
 8000470:	2264      	movs	r2, #100	; 0x64
 8000472:	2100      	movs	r1, #0
 8000474:	481d      	ldr	r0, [pc, #116]	; (80004ec <main+0x308>)
 8000476:	f001 fd11 	bl	8001e9c <memset>
		sprintf(ATcommand,"AT+SAPBR=2,1\r\n");
 800047a:	4928      	ldr	r1, [pc, #160]	; (800051c <main+0x338>)
 800047c:	4819      	ldr	r0, [pc, #100]	; (80004e4 <main+0x300>)
 800047e:	f001 fd2d 	bl	8001edc <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 8000482:	4818      	ldr	r0, [pc, #96]	; (80004e4 <main+0x300>)
 8000484:	f7ff fe62 	bl	800014c <strlen>
 8000488:	4603      	mov	r3, r0
 800048a:	b29a      	uxth	r2, r3
 800048c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000490:	4914      	ldr	r1, [pc, #80]	; (80004e4 <main+0x300>)
 8000492:	4815      	ldr	r0, [pc, #84]	; (80004e8 <main+0x304>)
 8000494:	f001 facb 	bl	8001a2e <HAL_UART_Transmit>
		HAL_Delay(100);
 8000498:	2064      	movs	r0, #100	; 0x64
 800049a:	f000 fbd5 	bl	8000c48 <HAL_Delay>
		 count++;
 800049e:	4b17      	ldr	r3, [pc, #92]	; (80004fc <main+0x318>)
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	3301      	adds	r3, #1
 80004a4:	b2da      	uxtb	r2, r3
 80004a6:	4b15      	ldr	r3, [pc, #84]	; (80004fc <main+0x318>)
 80004a8:	701a      	strb	r2, [r3, #0]
		    printf ("Check point count = %d,\n ", count);
 80004aa:	4b14      	ldr	r3, [pc, #80]	; (80004fc <main+0x318>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	4619      	mov	r1, r3
 80004b0:	4813      	ldr	r0, [pc, #76]	; (8000500 <main+0x31c>)
 80004b2:	f001 fcfb 	bl	8001eac <iprintf>
		    HAL_Delay(100);
 80004b6:	2064      	movs	r0, #100	; 0x64
 80004b8:	f000 fbc6 	bl	8000c48 <HAL_Delay>

    memset(buffer,0,sizeof(buffer));
 80004bc:	2264      	movs	r2, #100	; 0x64
 80004be:	2100      	movs	r1, #0
 80004c0:	480a      	ldr	r0, [pc, #40]	; (80004ec <main+0x308>)
 80004c2:	f001 fceb 	bl	8001e9c <memset>
		sprintf(ATcommand,"AT+CIICR\r\n");
 80004c6:	4916      	ldr	r1, [pc, #88]	; (8000520 <main+0x33c>)
 80004c8:	4806      	ldr	r0, [pc, #24]	; (80004e4 <main+0x300>)
 80004ca:	f001 fd07 	bl	8001edc <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 80004ce:	4805      	ldr	r0, [pc, #20]	; (80004e4 <main+0x300>)
 80004d0:	f7ff fe3c 	bl	800014c <strlen>
 80004d4:	4603      	mov	r3, r0
 80004d6:	b29a      	uxth	r2, r3
 80004d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004dc:	e022      	b.n	8000524 <main+0x340>
 80004de:	bf00      	nop
 80004e0:	080031d0 	.word	0x080031d0
 80004e4:	200000d0 	.word	0x200000d0
 80004e8:	2000008c 	.word	0x2000008c
 80004ec:	20000134 	.word	0x20000134
 80004f0:	080031d8 	.word	0x080031d8
 80004f4:	20000198 	.word	0x20000198
 80004f8:	080031dc 	.word	0x080031dc
 80004fc:	20000199 	.word	0x20000199
 8000500:	080031e8 	.word	0x080031e8
 8000504:	08003204 	.word	0x08003204
 8000508:	08003214 	.word	0x08003214
 800050c:	08003224 	.word	0x08003224
 8000510:	08003244 	.word	0x08003244
 8000514:	08003264 	.word	0x08003264
 8000518:	08003278 	.word	0x08003278
 800051c:	08003288 	.word	0x08003288
 8000520:	08003298 	.word	0x08003298
 8000524:	499f      	ldr	r1, [pc, #636]	; (80007a4 <main+0x5c0>)
 8000526:	48a0      	ldr	r0, [pc, #640]	; (80007a8 <main+0x5c4>)
 8000528:	f001 fa81 	bl	8001a2e <HAL_UART_Transmit>
		HAL_Delay(100);
 800052c:	2064      	movs	r0, #100	; 0x64
 800052e:	f000 fb8b 	bl	8000c48 <HAL_Delay>
		 count++;
 8000532:	4b9e      	ldr	r3, [pc, #632]	; (80007ac <main+0x5c8>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	3301      	adds	r3, #1
 8000538:	b2da      	uxtb	r2, r3
 800053a:	4b9c      	ldr	r3, [pc, #624]	; (80007ac <main+0x5c8>)
 800053c:	701a      	strb	r2, [r3, #0]
		    printf ("Check point count = %d,\n ", count);
 800053e:	4b9b      	ldr	r3, [pc, #620]	; (80007ac <main+0x5c8>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	4619      	mov	r1, r3
 8000544:	489a      	ldr	r0, [pc, #616]	; (80007b0 <main+0x5cc>)
 8000546:	f001 fcb1 	bl	8001eac <iprintf>
		    HAL_Delay(100);
 800054a:	2064      	movs	r0, #100	; 0x64
 800054c:	f000 fb7c 	bl	8000c48 <HAL_Delay>



		//*Data sending CODE START*//

		 memset(buffer,0,sizeof(buffer));
 8000550:	2264      	movs	r2, #100	; 0x64
 8000552:	2100      	movs	r1, #0
 8000554:	4897      	ldr	r0, [pc, #604]	; (80007b4 <main+0x5d0>)
 8000556:	f001 fca1 	bl	8001e9c <memset>
				sprintf(ATcommand,"AT+HTTPINIT\r\n");
 800055a:	4997      	ldr	r1, [pc, #604]	; (80007b8 <main+0x5d4>)
 800055c:	4891      	ldr	r0, [pc, #580]	; (80007a4 <main+0x5c0>)
 800055e:	f001 fcbd 	bl	8001edc <siprintf>
				HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),sizeof(buffer));
 8000562:	4890      	ldr	r0, [pc, #576]	; (80007a4 <main+0x5c0>)
 8000564:	f7ff fdf2 	bl	800014c <strlen>
 8000568:	4603      	mov	r3, r0
 800056a:	b29a      	uxth	r2, r3
 800056c:	2364      	movs	r3, #100	; 0x64
 800056e:	498d      	ldr	r1, [pc, #564]	; (80007a4 <main+0x5c0>)
 8000570:	488d      	ldr	r0, [pc, #564]	; (80007a8 <main+0x5c4>)
 8000572:	f001 fa5c 	bl	8001a2e <HAL_UART_Transmit>
				HAL_Delay(100);
 8000576:	2064      	movs	r0, #100	; 0x64
 8000578:	f000 fb66 	bl	8000c48 <HAL_Delay>
				 count++;
 800057c:	4b8b      	ldr	r3, [pc, #556]	; (80007ac <main+0x5c8>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	3301      	adds	r3, #1
 8000582:	b2da      	uxtb	r2, r3
 8000584:	4b89      	ldr	r3, [pc, #548]	; (80007ac <main+0x5c8>)
 8000586:	701a      	strb	r2, [r3, #0]
				    printf ("Check point count = %d,\n ", count);
 8000588:	4b88      	ldr	r3, [pc, #544]	; (80007ac <main+0x5c8>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	4619      	mov	r1, r3
 800058e:	4888      	ldr	r0, [pc, #544]	; (80007b0 <main+0x5cc>)
 8000590:	f001 fc8c 	bl	8001eac <iprintf>
				    HAL_Delay(100);
 8000594:	2064      	movs	r0, #100	; 0x64
 8000596:	f000 fb57 	bl	8000c48 <HAL_Delay>

		  memset(buffer,0,sizeof(buffer));
 800059a:	2264      	movs	r2, #100	; 0x64
 800059c:	2100      	movs	r1, #0
 800059e:	4885      	ldr	r0, [pc, #532]	; (80007b4 <main+0x5d0>)
 80005a0:	f001 fc7c 	bl	8001e9c <memset>
				sprintf(ATcommand,"AT+HTTPPARA=\"CID\",1\r\n");
 80005a4:	4985      	ldr	r1, [pc, #532]	; (80007bc <main+0x5d8>)
 80005a6:	487f      	ldr	r0, [pc, #508]	; (80007a4 <main+0x5c0>)
 80005a8:	f001 fc98 	bl	8001edc <siprintf>
				HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),sizeof(buffer));
 80005ac:	487d      	ldr	r0, [pc, #500]	; (80007a4 <main+0x5c0>)
 80005ae:	f7ff fdcd 	bl	800014c <strlen>
 80005b2:	4603      	mov	r3, r0
 80005b4:	b29a      	uxth	r2, r3
 80005b6:	2364      	movs	r3, #100	; 0x64
 80005b8:	497a      	ldr	r1, [pc, #488]	; (80007a4 <main+0x5c0>)
 80005ba:	487b      	ldr	r0, [pc, #492]	; (80007a8 <main+0x5c4>)
 80005bc:	f001 fa37 	bl	8001a2e <HAL_UART_Transmit>
				HAL_Delay(100);
 80005c0:	2064      	movs	r0, #100	; 0x64
 80005c2:	f000 fb41 	bl	8000c48 <HAL_Delay>
				 count++;
 80005c6:	4b79      	ldr	r3, [pc, #484]	; (80007ac <main+0x5c8>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	3301      	adds	r3, #1
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	4b77      	ldr	r3, [pc, #476]	; (80007ac <main+0x5c8>)
 80005d0:	701a      	strb	r2, [r3, #0]
				    printf ("Check point count = %d,\n ", count);
 80005d2:	4b76      	ldr	r3, [pc, #472]	; (80007ac <main+0x5c8>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	4619      	mov	r1, r3
 80005d8:	4875      	ldr	r0, [pc, #468]	; (80007b0 <main+0x5cc>)
 80005da:	f001 fc67 	bl	8001eac <iprintf>
				    HAL_Delay(100);
 80005de:	2064      	movs	r0, #100	; 0x64
 80005e0:	f000 fb32 	bl	8000c48 <HAL_Delay>

		  memset(buffer,0,sizeof(buffer));
 80005e4:	2264      	movs	r2, #100	; 0x64
 80005e6:	2100      	movs	r1, #0
 80005e8:	4872      	ldr	r0, [pc, #456]	; (80007b4 <main+0x5d0>)
 80005ea:	f001 fc57 	bl	8001e9c <memset>
				sprintf(ATcommand,"AT+HTTPPARA=\"URL\",api.thingspeak.com/update?api_key=PM6D6N0YMZVV9COX&field1=0\r\n");
 80005ee:	4974      	ldr	r1, [pc, #464]	; (80007c0 <main+0x5dc>)
 80005f0:	486c      	ldr	r0, [pc, #432]	; (80007a4 <main+0x5c0>)
 80005f2:	f001 fc73 	bl	8001edc <siprintf>
				HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),sizeof(buffer));
 80005f6:	486b      	ldr	r0, [pc, #428]	; (80007a4 <main+0x5c0>)
 80005f8:	f7ff fda8 	bl	800014c <strlen>
 80005fc:	4603      	mov	r3, r0
 80005fe:	b29a      	uxth	r2, r3
 8000600:	2364      	movs	r3, #100	; 0x64
 8000602:	4968      	ldr	r1, [pc, #416]	; (80007a4 <main+0x5c0>)
 8000604:	4868      	ldr	r0, [pc, #416]	; (80007a8 <main+0x5c4>)
 8000606:	f001 fa12 	bl	8001a2e <HAL_UART_Transmit>
				HAL_Delay(100);
 800060a:	2064      	movs	r0, #100	; 0x64
 800060c:	f000 fb1c 	bl	8000c48 <HAL_Delay>
				 count++;
 8000610:	4b66      	ldr	r3, [pc, #408]	; (80007ac <main+0x5c8>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	3301      	adds	r3, #1
 8000616:	b2da      	uxtb	r2, r3
 8000618:	4b64      	ldr	r3, [pc, #400]	; (80007ac <main+0x5c8>)
 800061a:	701a      	strb	r2, [r3, #0]
				    printf ("Check point count = %d,\n ", count);
 800061c:	4b63      	ldr	r3, [pc, #396]	; (80007ac <main+0x5c8>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	4619      	mov	r1, r3
 8000622:	4863      	ldr	r0, [pc, #396]	; (80007b0 <main+0x5cc>)
 8000624:	f001 fc42 	bl	8001eac <iprintf>
				    HAL_Delay(100);
 8000628:	2064      	movs	r0, #100	; 0x64
 800062a:	f000 fb0d 	bl	8000c48 <HAL_Delay>

		  memset(buffer,0,sizeof(buffer));
 800062e:	2264      	movs	r2, #100	; 0x64
 8000630:	2100      	movs	r1, #0
 8000632:	4860      	ldr	r0, [pc, #384]	; (80007b4 <main+0x5d0>)
 8000634:	f001 fc32 	bl	8001e9c <memset>
		        sprintf(ATcommand,"AT+HTTPPARA=\"REDIR\",1\r\n");
 8000638:	4962      	ldr	r1, [pc, #392]	; (80007c4 <main+0x5e0>)
 800063a:	485a      	ldr	r0, [pc, #360]	; (80007a4 <main+0x5c0>)
 800063c:	f001 fc4e 	bl	8001edc <siprintf>
				HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),sizeof(buffer));
 8000640:	4858      	ldr	r0, [pc, #352]	; (80007a4 <main+0x5c0>)
 8000642:	f7ff fd83 	bl	800014c <strlen>
 8000646:	4603      	mov	r3, r0
 8000648:	b29a      	uxth	r2, r3
 800064a:	2364      	movs	r3, #100	; 0x64
 800064c:	4955      	ldr	r1, [pc, #340]	; (80007a4 <main+0x5c0>)
 800064e:	4856      	ldr	r0, [pc, #344]	; (80007a8 <main+0x5c4>)
 8000650:	f001 f9ed 	bl	8001a2e <HAL_UART_Transmit>
				HAL_Delay(100);
 8000654:	2064      	movs	r0, #100	; 0x64
 8000656:	f000 faf7 	bl	8000c48 <HAL_Delay>
				 count++;
 800065a:	4b54      	ldr	r3, [pc, #336]	; (80007ac <main+0x5c8>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	3301      	adds	r3, #1
 8000660:	b2da      	uxtb	r2, r3
 8000662:	4b52      	ldr	r3, [pc, #328]	; (80007ac <main+0x5c8>)
 8000664:	701a      	strb	r2, [r3, #0]
				    printf ("Check point count = %d,\n ", count);
 8000666:	4b51      	ldr	r3, [pc, #324]	; (80007ac <main+0x5c8>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	4619      	mov	r1, r3
 800066c:	4850      	ldr	r0, [pc, #320]	; (80007b0 <main+0x5cc>)
 800066e:	f001 fc1d 	bl	8001eac <iprintf>
				    HAL_Delay(100);
 8000672:	2064      	movs	r0, #100	; 0x64
 8000674:	f000 fae8 	bl	8000c48 <HAL_Delay>

		  memset(buffer,0,sizeof(buffer));
 8000678:	2264      	movs	r2, #100	; 0x64
 800067a:	2100      	movs	r1, #0
 800067c:	484d      	ldr	r0, [pc, #308]	; (80007b4 <main+0x5d0>)
 800067e:	f001 fc0d 	bl	8001e9c <memset>
				sprintf(ATcommand,"AT+HTTPSSL=1\r\n");
 8000682:	4951      	ldr	r1, [pc, #324]	; (80007c8 <main+0x5e4>)
 8000684:	4847      	ldr	r0, [pc, #284]	; (80007a4 <main+0x5c0>)
 8000686:	f001 fc29 	bl	8001edc <siprintf>
				HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),sizeof(buffer));
 800068a:	4846      	ldr	r0, [pc, #280]	; (80007a4 <main+0x5c0>)
 800068c:	f7ff fd5e 	bl	800014c <strlen>
 8000690:	4603      	mov	r3, r0
 8000692:	b29a      	uxth	r2, r3
 8000694:	2364      	movs	r3, #100	; 0x64
 8000696:	4943      	ldr	r1, [pc, #268]	; (80007a4 <main+0x5c0>)
 8000698:	4843      	ldr	r0, [pc, #268]	; (80007a8 <main+0x5c4>)
 800069a:	f001 f9c8 	bl	8001a2e <HAL_UART_Transmit>
				HAL_Delay(100);
 800069e:	2064      	movs	r0, #100	; 0x64
 80006a0:	f000 fad2 	bl	8000c48 <HAL_Delay>
				 count++;
 80006a4:	4b41      	ldr	r3, [pc, #260]	; (80007ac <main+0x5c8>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	4b3f      	ldr	r3, [pc, #252]	; (80007ac <main+0x5c8>)
 80006ae:	701a      	strb	r2, [r3, #0]
				    printf ("Check point count = %d,\n ", count);
 80006b0:	4b3e      	ldr	r3, [pc, #248]	; (80007ac <main+0x5c8>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	4619      	mov	r1, r3
 80006b6:	483e      	ldr	r0, [pc, #248]	; (80007b0 <main+0x5cc>)
 80006b8:	f001 fbf8 	bl	8001eac <iprintf>
				    HAL_Delay(100);
 80006bc:	2064      	movs	r0, #100	; 0x64
 80006be:	f000 fac3 	bl	8000c48 <HAL_Delay>

		  memset(buffer,0,sizeof(buffer));
 80006c2:	2264      	movs	r2, #100	; 0x64
 80006c4:	2100      	movs	r1, #0
 80006c6:	483b      	ldr	r0, [pc, #236]	; (80007b4 <main+0x5d0>)
 80006c8:	f001 fbe8 	bl	8001e9c <memset>
				sprintf(ATcommand,"AT+HTTPACTION=0\r\n");
 80006cc:	493f      	ldr	r1, [pc, #252]	; (80007cc <main+0x5e8>)
 80006ce:	4835      	ldr	r0, [pc, #212]	; (80007a4 <main+0x5c0>)
 80006d0:	f001 fc04 	bl	8001edc <siprintf>
				HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),sizeof(buffer));
 80006d4:	4833      	ldr	r0, [pc, #204]	; (80007a4 <main+0x5c0>)
 80006d6:	f7ff fd39 	bl	800014c <strlen>
 80006da:	4603      	mov	r3, r0
 80006dc:	b29a      	uxth	r2, r3
 80006de:	2364      	movs	r3, #100	; 0x64
 80006e0:	4930      	ldr	r1, [pc, #192]	; (80007a4 <main+0x5c0>)
 80006e2:	4831      	ldr	r0, [pc, #196]	; (80007a8 <main+0x5c4>)
 80006e4:	f001 f9a3 	bl	8001a2e <HAL_UART_Transmit>
				HAL_Delay(100);
 80006e8:	2064      	movs	r0, #100	; 0x64
 80006ea:	f000 faad 	bl	8000c48 <HAL_Delay>
				 count++;
 80006ee:	4b2f      	ldr	r3, [pc, #188]	; (80007ac <main+0x5c8>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	3301      	adds	r3, #1
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	4b2d      	ldr	r3, [pc, #180]	; (80007ac <main+0x5c8>)
 80006f8:	701a      	strb	r2, [r3, #0]
				    printf ("Check point count = %d,\n ", count);
 80006fa:	4b2c      	ldr	r3, [pc, #176]	; (80007ac <main+0x5c8>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	4619      	mov	r1, r3
 8000700:	482b      	ldr	r0, [pc, #172]	; (80007b0 <main+0x5cc>)
 8000702:	f001 fbd3 	bl	8001eac <iprintf>
				    HAL_Delay(100);
 8000706:	2064      	movs	r0, #100	; 0x64
 8000708:	f000 fa9e 	bl	8000c48 <HAL_Delay>

		  memset(buffer,0,sizeof(buffer));
 800070c:	2264      	movs	r2, #100	; 0x64
 800070e:	2100      	movs	r1, #0
 8000710:	4828      	ldr	r0, [pc, #160]	; (80007b4 <main+0x5d0>)
 8000712:	f001 fbc3 	bl	8001e9c <memset>
				sprintf(ATcommand,"AT+HTTPREAD\r\n");
 8000716:	492e      	ldr	r1, [pc, #184]	; (80007d0 <main+0x5ec>)
 8000718:	4822      	ldr	r0, [pc, #136]	; (80007a4 <main+0x5c0>)
 800071a:	f001 fbdf 	bl	8001edc <siprintf>
				HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),sizeof(buffer));
 800071e:	4821      	ldr	r0, [pc, #132]	; (80007a4 <main+0x5c0>)
 8000720:	f7ff fd14 	bl	800014c <strlen>
 8000724:	4603      	mov	r3, r0
 8000726:	b29a      	uxth	r2, r3
 8000728:	2364      	movs	r3, #100	; 0x64
 800072a:	491e      	ldr	r1, [pc, #120]	; (80007a4 <main+0x5c0>)
 800072c:	481e      	ldr	r0, [pc, #120]	; (80007a8 <main+0x5c4>)
 800072e:	f001 f97e 	bl	8001a2e <HAL_UART_Transmit>
				HAL_Delay(100);
 8000732:	2064      	movs	r0, #100	; 0x64
 8000734:	f000 fa88 	bl	8000c48 <HAL_Delay>
				 count++;
 8000738:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <main+0x5c8>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	3301      	adds	r3, #1
 800073e:	b2da      	uxtb	r2, r3
 8000740:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <main+0x5c8>)
 8000742:	701a      	strb	r2, [r3, #0]
				    printf ("Check point count = %d,\n ", count);
 8000744:	4b19      	ldr	r3, [pc, #100]	; (80007ac <main+0x5c8>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	4619      	mov	r1, r3
 800074a:	4819      	ldr	r0, [pc, #100]	; (80007b0 <main+0x5cc>)
 800074c:	f001 fbae 	bl	8001eac <iprintf>
				    HAL_Delay(100);
 8000750:	2064      	movs	r0, #100	; 0x64
 8000752:	f000 fa79 	bl	8000c48 <HAL_Delay>

		  memset(buffer,0,sizeof(buffer));
 8000756:	2264      	movs	r2, #100	; 0x64
 8000758:	2100      	movs	r1, #0
 800075a:	4816      	ldr	r0, [pc, #88]	; (80007b4 <main+0x5d0>)
 800075c:	f001 fb9e 	bl	8001e9c <memset>
				sprintf(ATcommand,"AT+HTTPTERM\r\n");
 8000760:	491c      	ldr	r1, [pc, #112]	; (80007d4 <main+0x5f0>)
 8000762:	4810      	ldr	r0, [pc, #64]	; (80007a4 <main+0x5c0>)
 8000764:	f001 fbba 	bl	8001edc <siprintf>
				HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),sizeof(buffer));
 8000768:	480e      	ldr	r0, [pc, #56]	; (80007a4 <main+0x5c0>)
 800076a:	f7ff fcef 	bl	800014c <strlen>
 800076e:	4603      	mov	r3, r0
 8000770:	b29a      	uxth	r2, r3
 8000772:	2364      	movs	r3, #100	; 0x64
 8000774:	490b      	ldr	r1, [pc, #44]	; (80007a4 <main+0x5c0>)
 8000776:	480c      	ldr	r0, [pc, #48]	; (80007a8 <main+0x5c4>)
 8000778:	f001 f959 	bl	8001a2e <HAL_UART_Transmit>
				HAL_Delay(100);
 800077c:	2064      	movs	r0, #100	; 0x64
 800077e:	f000 fa63 	bl	8000c48 <HAL_Delay>
				 count++;
 8000782:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <main+0x5c8>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	3301      	adds	r3, #1
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <main+0x5c8>)
 800078c:	701a      	strb	r2, [r3, #0]
				    printf ("Check point count = %d,\n ", count);
 800078e:	4b07      	ldr	r3, [pc, #28]	; (80007ac <main+0x5c8>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	4619      	mov	r1, r3
 8000794:	4806      	ldr	r0, [pc, #24]	; (80007b0 <main+0x5cc>)
 8000796:	f001 fb89 	bl	8001eac <iprintf>
				    HAL_Delay(100);
 800079a:	2064      	movs	r0, #100	; 0x64
 800079c:	f000 fa54 	bl	8000c48 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <main+0x5bc>
 80007a2:	bf00      	nop
 80007a4:	200000d0 	.word	0x200000d0
 80007a8:	2000008c 	.word	0x2000008c
 80007ac:	20000199 	.word	0x20000199
 80007b0:	080031e8 	.word	0x080031e8
 80007b4:	20000134 	.word	0x20000134
 80007b8:	080032a4 	.word	0x080032a4
 80007bc:	080032b4 	.word	0x080032b4
 80007c0:	080032cc 	.word	0x080032cc
 80007c4:	0800331c 	.word	0x0800331c
 80007c8:	08003334 	.word	0x08003334
 80007cc:	08003344 	.word	0x08003344
 80007d0:	08003358 	.word	0x08003358
 80007d4:	08003368 	.word	0x08003368

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b090      	sub	sp, #64	; 0x40
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0318 	add.w	r3, r7, #24
 80007e2:	2228      	movs	r2, #40	; 0x28
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f001 fb58 	bl	8001e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007fa:	2302      	movs	r3, #2
 80007fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fe:	2301      	movs	r3, #1
 8000800:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000802:	2310      	movs	r3, #16
 8000804:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000806:	2300      	movs	r3, #0
 8000808:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080a:	f107 0318 	add.w	r3, r7, #24
 800080e:	4618      	mov	r0, r3
 8000810:	f000 fca6 	bl	8001160 <HAL_RCC_OscConfig>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800081a:	f000 f859 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081e:	230f      	movs	r3, #15
 8000820:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f000 ff14 	bl	8001664 <HAL_RCC_ClockConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000842:	f000 f845 	bl	80008d0 <Error_Handler>
  }
}
 8000846:	bf00      	nop
 8000848:	3740      	adds	r7, #64	; 0x40
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_USART1_UART_Init+0x4c>)
 8000856:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <MX_USART1_UART_Init+0x50>)
 8000858:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <MX_USART1_UART_Init+0x4c>)
 800085c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000860:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_USART1_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_USART1_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_USART1_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_USART1_UART_Init+0x4c>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_USART1_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_USART1_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_USART1_UART_Init+0x4c>)
 8000888:	f001 f884 	bl	8001994 <HAL_UART_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000892:	f000 f81d 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	2000008c 	.word	0x2000008c
 80008a0:	40013800 	.word	0x40013800

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <MX_GPIO_Init+0x28>)
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	4a07      	ldr	r2, [pc, #28]	; (80008cc <MX_GPIO_Init+0x28>)
 80008b0:	f043 0304 	orr.w	r3, r3, #4
 80008b4:	6193      	str	r3, [r2, #24]
 80008b6:	4b05      	ldr	r3, [pc, #20]	; (80008cc <MX_GPIO_Init+0x28>)
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	f003 0304 	and.w	r3, r3, #4
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr
 80008cc:	40021000 	.word	0x40021000

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <Error_Handler+0x8>
	...

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <HAL_MspInit+0x5c>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	4a14      	ldr	r2, [pc, #80]	; (8000938 <HAL_MspInit+0x5c>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6193      	str	r3, [r2, #24]
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <HAL_MspInit+0x5c>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <HAL_MspInit+0x5c>)
 80008fc:	69db      	ldr	r3, [r3, #28]
 80008fe:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <HAL_MspInit+0x5c>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000904:	61d3      	str	r3, [r2, #28]
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <HAL_MspInit+0x5c>)
 8000908:	69db      	ldr	r3, [r3, #28]
 800090a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000912:	4b0a      	ldr	r3, [pc, #40]	; (800093c <HAL_MspInit+0x60>)
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	4a04      	ldr	r2, [pc, #16]	; (800093c <HAL_MspInit+0x60>)
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092e:	bf00      	nop
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	40021000 	.word	0x40021000
 800093c:	40010000 	.word	0x40010000

08000940 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 0310 	add.w	r3, r7, #16
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a1c      	ldr	r2, [pc, #112]	; (80009cc <HAL_UART_MspInit+0x8c>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d131      	bne.n	80009c4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000960:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <HAL_UART_MspInit+0x90>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a1a      	ldr	r2, [pc, #104]	; (80009d0 <HAL_UART_MspInit+0x90>)
 8000966:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096a:	6193      	str	r3, [r2, #24]
 800096c:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <HAL_UART_MspInit+0x90>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000978:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <HAL_UART_MspInit+0x90>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <HAL_UART_MspInit+0x90>)
 800097e:	f043 0304 	orr.w	r3, r3, #4
 8000982:	6193      	str	r3, [r2, #24]
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <HAL_UART_MspInit+0x90>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	f003 0304 	and.w	r3, r3, #4
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000990:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000994:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800099a:	2303      	movs	r3, #3
 800099c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 0310 	add.w	r3, r7, #16
 80009a2:	4619      	mov	r1, r3
 80009a4:	480b      	ldr	r0, [pc, #44]	; (80009d4 <HAL_UART_MspInit+0x94>)
 80009a6:	f000 fa57 	bl	8000e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	f107 0310 	add.w	r3, r7, #16
 80009bc:	4619      	mov	r1, r3
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <HAL_UART_MspInit+0x94>)
 80009c0:	f000 fa4a 	bl	8000e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009c4:	bf00      	nop
 80009c6:	3720      	adds	r7, #32
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40013800 	.word	0x40013800
 80009d0:	40021000 	.word	0x40021000
 80009d4:	40010800 	.word	0x40010800

080009d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <NMI_Handler+0x4>

080009de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <HardFault_Handler+0x4>

080009e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <MemManage_Handler+0x4>

080009ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <BusFault_Handler+0x4>

080009f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <UsageFault_Handler+0x4>

080009f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr

08000a02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr

08000a0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bc80      	pop	{r7}
 8000a18:	4770      	bx	lr

08000a1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a1e:	f000 f8f7 	bl	8000c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b086      	sub	sp, #24
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	60f8      	str	r0, [r7, #12]
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
 8000a36:	e00a      	b.n	8000a4e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a38:	f3af 8000 	nop.w
 8000a3c:	4601      	mov	r1, r0
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	1c5a      	adds	r2, r3, #1
 8000a42:	60ba      	str	r2, [r7, #8]
 8000a44:	b2ca      	uxtb	r2, r1
 8000a46:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	617b      	str	r3, [r7, #20]
 8000a4e:	697a      	ldr	r2, [r7, #20]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	dbf0      	blt.n	8000a38 <_read+0x12>
	}

return len;
 8000a56:	687b      	ldr	r3, [r7, #4]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3718      	adds	r7, #24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	return -1;
 8000a68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr

08000a76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
 8000a7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a86:	605a      	str	r2, [r3, #4]
	return 0;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr

08000a94 <_isatty>:

int _isatty(int file)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	return 1;
 8000a9c:	2301      	movs	r3, #1
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr

08000aa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
	return 0;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr

08000ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac8:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <_sbrk+0x5c>)
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <_sbrk+0x60>)
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <_sbrk+0x64>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d102      	bne.n	8000ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <_sbrk+0x64>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <_sbrk+0x68>)
 8000ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d207      	bcs.n	8000b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af0:	f001 f9aa 	bl	8001e48 <__errno>
 8000af4:	4603      	mov	r3, r0
 8000af6:	220c      	movs	r2, #12
 8000af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
 8000afe:	e009      	b.n	8000b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <_sbrk+0x64>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <_sbrk+0x64>)
 8000b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b12:	68fb      	ldr	r3, [r7, #12]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20005000 	.word	0x20005000
 8000b20:	00000400 	.word	0x00000400
 8000b24:	2000019c 	.word	0x2000019c
 8000b28:	200001b8 	.word	0x200001b8

08000b2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr

08000b38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b38:	480c      	ldr	r0, [pc, #48]	; (8000b6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b3a:	490d      	ldr	r1, [pc, #52]	; (8000b70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b3c:	4a0d      	ldr	r2, [pc, #52]	; (8000b74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b40:	e002      	b.n	8000b48 <LoopCopyDataInit>

08000b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b46:	3304      	adds	r3, #4

08000b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b4c:	d3f9      	bcc.n	8000b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b50:	4c0a      	ldr	r4, [pc, #40]	; (8000b7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b54:	e001      	b.n	8000b5a <LoopFillZerobss>

08000b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b58:	3204      	adds	r2, #4

08000b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b5c:	d3fb      	bcc.n	8000b56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b5e:	f7ff ffe5 	bl	8000b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b62:	f001 f977 	bl	8001e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b66:	f7ff fb3d 	bl	80001e4 <main>
  bx lr
 8000b6a:	4770      	bx	lr
  ldr r0, =_sdata
 8000b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b70:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b74:	08003440 	.word	0x08003440
  ldr r2, =_sbss
 8000b78:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b7c:	200001b4 	.word	0x200001b4

08000b80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b80:	e7fe      	b.n	8000b80 <ADC1_2_IRQHandler>
	...

08000b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <HAL_Init+0x28>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a07      	ldr	r2, [pc, #28]	; (8000bac <HAL_Init+0x28>)
 8000b8e:	f043 0310 	orr.w	r3, r3, #16
 8000b92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b94:	2003      	movs	r0, #3
 8000b96:	f000 f92b 	bl	8000df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9a:	200f      	movs	r0, #15
 8000b9c:	f000 f808 	bl	8000bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba0:	f7ff fe9c 	bl	80008dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40022000 	.word	0x40022000

08000bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <HAL_InitTick+0x54>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <HAL_InitTick+0x58>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 f935 	bl	8000e3e <HAL_SYSTICK_Config>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e00e      	b.n	8000bfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b0f      	cmp	r3, #15
 8000be2:	d80a      	bhi.n	8000bfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be4:	2200      	movs	r2, #0
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bec:	f000 f90b 	bl	8000e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf0:	4a06      	ldr	r2, [pc, #24]	; (8000c0c <HAL_InitTick+0x5c>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e000      	b.n	8000bfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000000 	.word	0x20000000
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	20000004 	.word	0x20000004

08000c10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <HAL_IncTick+0x1c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <HAL_IncTick+0x20>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a03      	ldr	r2, [pc, #12]	; (8000c30 <HAL_IncTick+0x20>)
 8000c22:	6013      	str	r3, [r2, #0]
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	200001a0 	.word	0x200001a0

08000c34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return uwTick;
 8000c38:	4b02      	ldr	r3, [pc, #8]	; (8000c44 <HAL_GetTick+0x10>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr
 8000c44:	200001a0 	.word	0x200001a0

08000c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c50:	f7ff fff0 	bl	8000c34 <HAL_GetTick>
 8000c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c60:	d005      	beq.n	8000c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <HAL_Delay+0x44>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	461a      	mov	r2, r3
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c6e:	bf00      	nop
 8000c70:	f7ff ffe0 	bl	8000c34 <HAL_GetTick>
 8000c74:	4602      	mov	r2, r0
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d8f7      	bhi.n	8000c70 <HAL_Delay+0x28>
  {
  }
}
 8000c80:	bf00      	nop
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000008 	.word	0x20000008

08000c90 <__NVIC_SetPriorityGrouping>:
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cac:	4013      	ands	r3, r2
 8000cae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc2:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	60d3      	str	r3, [r2, #12]
}
 8000cc8:	bf00      	nop
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_GetPriorityGrouping>:
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	0a1b      	lsrs	r3, r3, #8
 8000ce2:	f003 0307 	and.w	r3, r3, #7
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <__NVIC_SetPriority>:
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	db0a      	blt.n	8000d1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	490c      	ldr	r1, [pc, #48]	; (8000d40 <__NVIC_SetPriority+0x4c>)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	0112      	lsls	r2, r2, #4
 8000d14:	b2d2      	uxtb	r2, r2
 8000d16:	440b      	add	r3, r1
 8000d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d1c:	e00a      	b.n	8000d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4908      	ldr	r1, [pc, #32]	; (8000d44 <__NVIC_SetPriority+0x50>)
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	f003 030f 	and.w	r3, r3, #15
 8000d2a:	3b04      	subs	r3, #4
 8000d2c:	0112      	lsls	r2, r2, #4
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	440b      	add	r3, r1
 8000d32:	761a      	strb	r2, [r3, #24]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000e100 	.word	0xe000e100
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <NVIC_EncodePriority>:
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b089      	sub	sp, #36	; 0x24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	f1c3 0307 	rsb	r3, r3, #7
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	bf28      	it	cs
 8000d66:	2304      	movcs	r3, #4
 8000d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	2b06      	cmp	r3, #6
 8000d70:	d902      	bls.n	8000d78 <NVIC_EncodePriority+0x30>
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3b03      	subs	r3, #3
 8000d76:	e000      	b.n	8000d7a <NVIC_EncodePriority+0x32>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43da      	mvns	r2, r3
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d90:	f04f 31ff 	mov.w	r1, #4294967295
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9a:	43d9      	mvns	r1, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	4313      	orrs	r3, r2
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3724      	adds	r7, #36	; 0x24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr

08000dac <SysTick_Config>:
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dbc:	d301      	bcc.n	8000dc2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00f      	b.n	8000de2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <SysTick_Config+0x40>)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dca:	210f      	movs	r1, #15
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	f7ff ff90 	bl	8000cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <SysTick_Config+0x40>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dda:	4b04      	ldr	r3, [pc, #16]	; (8000dec <SysTick_Config+0x40>)
 8000ddc:	2207      	movs	r2, #7
 8000dde:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	e000e010 	.word	0xe000e010

08000df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff ff49 	bl	8000c90 <__NVIC_SetPriorityGrouping>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
 8000e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e18:	f7ff ff5e 	bl	8000cd8 <__NVIC_GetPriorityGrouping>
 8000e1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	68b9      	ldr	r1, [r7, #8]
 8000e22:	6978      	ldr	r0, [r7, #20]
 8000e24:	f7ff ff90 	bl	8000d48 <NVIC_EncodePriority>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff5f 	bl	8000cf4 <__NVIC_SetPriority>
}
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff ffb0 	bl	8000dac <SysTick_Config>
 8000e4c:	4603      	mov	r3, r0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b08b      	sub	sp, #44	; 0x2c
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e66:	2300      	movs	r3, #0
 8000e68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e6a:	e169      	b.n	8001140 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	69fa      	ldr	r2, [r7, #28]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	f040 8158 	bne.w	800113a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	4a9a      	ldr	r2, [pc, #616]	; (80010f8 <HAL_GPIO_Init+0x2a0>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d05e      	beq.n	8000f52 <HAL_GPIO_Init+0xfa>
 8000e94:	4a98      	ldr	r2, [pc, #608]	; (80010f8 <HAL_GPIO_Init+0x2a0>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d875      	bhi.n	8000f86 <HAL_GPIO_Init+0x12e>
 8000e9a:	4a98      	ldr	r2, [pc, #608]	; (80010fc <HAL_GPIO_Init+0x2a4>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d058      	beq.n	8000f52 <HAL_GPIO_Init+0xfa>
 8000ea0:	4a96      	ldr	r2, [pc, #600]	; (80010fc <HAL_GPIO_Init+0x2a4>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d86f      	bhi.n	8000f86 <HAL_GPIO_Init+0x12e>
 8000ea6:	4a96      	ldr	r2, [pc, #600]	; (8001100 <HAL_GPIO_Init+0x2a8>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d052      	beq.n	8000f52 <HAL_GPIO_Init+0xfa>
 8000eac:	4a94      	ldr	r2, [pc, #592]	; (8001100 <HAL_GPIO_Init+0x2a8>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d869      	bhi.n	8000f86 <HAL_GPIO_Init+0x12e>
 8000eb2:	4a94      	ldr	r2, [pc, #592]	; (8001104 <HAL_GPIO_Init+0x2ac>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d04c      	beq.n	8000f52 <HAL_GPIO_Init+0xfa>
 8000eb8:	4a92      	ldr	r2, [pc, #584]	; (8001104 <HAL_GPIO_Init+0x2ac>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d863      	bhi.n	8000f86 <HAL_GPIO_Init+0x12e>
 8000ebe:	4a92      	ldr	r2, [pc, #584]	; (8001108 <HAL_GPIO_Init+0x2b0>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d046      	beq.n	8000f52 <HAL_GPIO_Init+0xfa>
 8000ec4:	4a90      	ldr	r2, [pc, #576]	; (8001108 <HAL_GPIO_Init+0x2b0>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d85d      	bhi.n	8000f86 <HAL_GPIO_Init+0x12e>
 8000eca:	2b12      	cmp	r3, #18
 8000ecc:	d82a      	bhi.n	8000f24 <HAL_GPIO_Init+0xcc>
 8000ece:	2b12      	cmp	r3, #18
 8000ed0:	d859      	bhi.n	8000f86 <HAL_GPIO_Init+0x12e>
 8000ed2:	a201      	add	r2, pc, #4	; (adr r2, 8000ed8 <HAL_GPIO_Init+0x80>)
 8000ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed8:	08000f53 	.word	0x08000f53
 8000edc:	08000f2d 	.word	0x08000f2d
 8000ee0:	08000f3f 	.word	0x08000f3f
 8000ee4:	08000f81 	.word	0x08000f81
 8000ee8:	08000f87 	.word	0x08000f87
 8000eec:	08000f87 	.word	0x08000f87
 8000ef0:	08000f87 	.word	0x08000f87
 8000ef4:	08000f87 	.word	0x08000f87
 8000ef8:	08000f87 	.word	0x08000f87
 8000efc:	08000f87 	.word	0x08000f87
 8000f00:	08000f87 	.word	0x08000f87
 8000f04:	08000f87 	.word	0x08000f87
 8000f08:	08000f87 	.word	0x08000f87
 8000f0c:	08000f87 	.word	0x08000f87
 8000f10:	08000f87 	.word	0x08000f87
 8000f14:	08000f87 	.word	0x08000f87
 8000f18:	08000f87 	.word	0x08000f87
 8000f1c:	08000f35 	.word	0x08000f35
 8000f20:	08000f49 	.word	0x08000f49
 8000f24:	4a79      	ldr	r2, [pc, #484]	; (800110c <HAL_GPIO_Init+0x2b4>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d013      	beq.n	8000f52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f2a:	e02c      	b.n	8000f86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	623b      	str	r3, [r7, #32]
          break;
 8000f32:	e029      	b.n	8000f88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	623b      	str	r3, [r7, #32]
          break;
 8000f3c:	e024      	b.n	8000f88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	3308      	adds	r3, #8
 8000f44:	623b      	str	r3, [r7, #32]
          break;
 8000f46:	e01f      	b.n	8000f88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	330c      	adds	r3, #12
 8000f4e:	623b      	str	r3, [r7, #32]
          break;
 8000f50:	e01a      	b.n	8000f88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d102      	bne.n	8000f60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	623b      	str	r3, [r7, #32]
          break;
 8000f5e:	e013      	b.n	8000f88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d105      	bne.n	8000f74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f68:	2308      	movs	r3, #8
 8000f6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	69fa      	ldr	r2, [r7, #28]
 8000f70:	611a      	str	r2, [r3, #16]
          break;
 8000f72:	e009      	b.n	8000f88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f74:	2308      	movs	r3, #8
 8000f76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	69fa      	ldr	r2, [r7, #28]
 8000f7c:	615a      	str	r2, [r3, #20]
          break;
 8000f7e:	e003      	b.n	8000f88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f80:	2300      	movs	r3, #0
 8000f82:	623b      	str	r3, [r7, #32]
          break;
 8000f84:	e000      	b.n	8000f88 <HAL_GPIO_Init+0x130>
          break;
 8000f86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	2bff      	cmp	r3, #255	; 0xff
 8000f8c:	d801      	bhi.n	8000f92 <HAL_GPIO_Init+0x13a>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	e001      	b.n	8000f96 <HAL_GPIO_Init+0x13e>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3304      	adds	r3, #4
 8000f96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	2bff      	cmp	r3, #255	; 0xff
 8000f9c:	d802      	bhi.n	8000fa4 <HAL_GPIO_Init+0x14c>
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	e002      	b.n	8000faa <HAL_GPIO_Init+0x152>
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa6:	3b08      	subs	r3, #8
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	210f      	movs	r1, #15
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	401a      	ands	r2, r3
 8000fbc:	6a39      	ldr	r1, [r7, #32]
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f000 80b1 	beq.w	800113a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fd8:	4b4d      	ldr	r3, [pc, #308]	; (8001110 <HAL_GPIO_Init+0x2b8>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	4a4c      	ldr	r2, [pc, #304]	; (8001110 <HAL_GPIO_Init+0x2b8>)
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	6193      	str	r3, [r2, #24]
 8000fe4:	4b4a      	ldr	r3, [pc, #296]	; (8001110 <HAL_GPIO_Init+0x2b8>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ff0:	4a48      	ldr	r2, [pc, #288]	; (8001114 <HAL_GPIO_Init+0x2bc>)
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff4:	089b      	lsrs	r3, r3, #2
 8000ff6:	3302      	adds	r3, #2
 8000ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	220f      	movs	r2, #15
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	4013      	ands	r3, r2
 8001012:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a40      	ldr	r2, [pc, #256]	; (8001118 <HAL_GPIO_Init+0x2c0>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d013      	beq.n	8001044 <HAL_GPIO_Init+0x1ec>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a3f      	ldr	r2, [pc, #252]	; (800111c <HAL_GPIO_Init+0x2c4>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d00d      	beq.n	8001040 <HAL_GPIO_Init+0x1e8>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a3e      	ldr	r2, [pc, #248]	; (8001120 <HAL_GPIO_Init+0x2c8>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d007      	beq.n	800103c <HAL_GPIO_Init+0x1e4>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a3d      	ldr	r2, [pc, #244]	; (8001124 <HAL_GPIO_Init+0x2cc>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d101      	bne.n	8001038 <HAL_GPIO_Init+0x1e0>
 8001034:	2303      	movs	r3, #3
 8001036:	e006      	b.n	8001046 <HAL_GPIO_Init+0x1ee>
 8001038:	2304      	movs	r3, #4
 800103a:	e004      	b.n	8001046 <HAL_GPIO_Init+0x1ee>
 800103c:	2302      	movs	r3, #2
 800103e:	e002      	b.n	8001046 <HAL_GPIO_Init+0x1ee>
 8001040:	2301      	movs	r3, #1
 8001042:	e000      	b.n	8001046 <HAL_GPIO_Init+0x1ee>
 8001044:	2300      	movs	r3, #0
 8001046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001048:	f002 0203 	and.w	r2, r2, #3
 800104c:	0092      	lsls	r2, r2, #2
 800104e:	4093      	lsls	r3, r2
 8001050:	68fa      	ldr	r2, [r7, #12]
 8001052:	4313      	orrs	r3, r2
 8001054:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001056:	492f      	ldr	r1, [pc, #188]	; (8001114 <HAL_GPIO_Init+0x2bc>)
 8001058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105a:	089b      	lsrs	r3, r3, #2
 800105c:	3302      	adds	r3, #2
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d006      	beq.n	800107e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001070:	4b2d      	ldr	r3, [pc, #180]	; (8001128 <HAL_GPIO_Init+0x2d0>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	492c      	ldr	r1, [pc, #176]	; (8001128 <HAL_GPIO_Init+0x2d0>)
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	4313      	orrs	r3, r2
 800107a:	600b      	str	r3, [r1, #0]
 800107c:	e006      	b.n	800108c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800107e:	4b2a      	ldr	r3, [pc, #168]	; (8001128 <HAL_GPIO_Init+0x2d0>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	43db      	mvns	r3, r3
 8001086:	4928      	ldr	r1, [pc, #160]	; (8001128 <HAL_GPIO_Init+0x2d0>)
 8001088:	4013      	ands	r3, r2
 800108a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d006      	beq.n	80010a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001098:	4b23      	ldr	r3, [pc, #140]	; (8001128 <HAL_GPIO_Init+0x2d0>)
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	4922      	ldr	r1, [pc, #136]	; (8001128 <HAL_GPIO_Init+0x2d0>)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	604b      	str	r3, [r1, #4]
 80010a4:	e006      	b.n	80010b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010a6:	4b20      	ldr	r3, [pc, #128]	; (8001128 <HAL_GPIO_Init+0x2d0>)
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	43db      	mvns	r3, r3
 80010ae:	491e      	ldr	r1, [pc, #120]	; (8001128 <HAL_GPIO_Init+0x2d0>)
 80010b0:	4013      	ands	r3, r2
 80010b2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d006      	beq.n	80010ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010c0:	4b19      	ldr	r3, [pc, #100]	; (8001128 <HAL_GPIO_Init+0x2d0>)
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	4918      	ldr	r1, [pc, #96]	; (8001128 <HAL_GPIO_Init+0x2d0>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	608b      	str	r3, [r1, #8]
 80010cc:	e006      	b.n	80010dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <HAL_GPIO_Init+0x2d0>)
 80010d0:	689a      	ldr	r2, [r3, #8]
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	4914      	ldr	r1, [pc, #80]	; (8001128 <HAL_GPIO_Init+0x2d0>)
 80010d8:	4013      	ands	r3, r2
 80010da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d021      	beq.n	800112c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <HAL_GPIO_Init+0x2d0>)
 80010ea:	68da      	ldr	r2, [r3, #12]
 80010ec:	490e      	ldr	r1, [pc, #56]	; (8001128 <HAL_GPIO_Init+0x2d0>)
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	60cb      	str	r3, [r1, #12]
 80010f4:	e021      	b.n	800113a <HAL_GPIO_Init+0x2e2>
 80010f6:	bf00      	nop
 80010f8:	10320000 	.word	0x10320000
 80010fc:	10310000 	.word	0x10310000
 8001100:	10220000 	.word	0x10220000
 8001104:	10210000 	.word	0x10210000
 8001108:	10120000 	.word	0x10120000
 800110c:	10110000 	.word	0x10110000
 8001110:	40021000 	.word	0x40021000
 8001114:	40010000 	.word	0x40010000
 8001118:	40010800 	.word	0x40010800
 800111c:	40010c00 	.word	0x40010c00
 8001120:	40011000 	.word	0x40011000
 8001124:	40011400 	.word	0x40011400
 8001128:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <HAL_GPIO_Init+0x304>)
 800112e:	68da      	ldr	r2, [r3, #12]
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	43db      	mvns	r3, r3
 8001134:	4909      	ldr	r1, [pc, #36]	; (800115c <HAL_GPIO_Init+0x304>)
 8001136:	4013      	ands	r3, r2
 8001138:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	3301      	adds	r3, #1
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001146:	fa22 f303 	lsr.w	r3, r2, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	f47f ae8e 	bne.w	8000e6c <HAL_GPIO_Init+0x14>
  }
}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	372c      	adds	r7, #44	; 0x2c
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	40010400 	.word	0x40010400

08001160 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e272      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b00      	cmp	r3, #0
 800117c:	f000 8087 	beq.w	800128e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001180:	4b92      	ldr	r3, [pc, #584]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 030c 	and.w	r3, r3, #12
 8001188:	2b04      	cmp	r3, #4
 800118a:	d00c      	beq.n	80011a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800118c:	4b8f      	ldr	r3, [pc, #572]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 030c 	and.w	r3, r3, #12
 8001194:	2b08      	cmp	r3, #8
 8001196:	d112      	bne.n	80011be <HAL_RCC_OscConfig+0x5e>
 8001198:	4b8c      	ldr	r3, [pc, #560]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a4:	d10b      	bne.n	80011be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a6:	4b89      	ldr	r3, [pc, #548]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d06c      	beq.n	800128c <HAL_RCC_OscConfig+0x12c>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d168      	bne.n	800128c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e24c      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c6:	d106      	bne.n	80011d6 <HAL_RCC_OscConfig+0x76>
 80011c8:	4b80      	ldr	r3, [pc, #512]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a7f      	ldr	r2, [pc, #508]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	e02e      	b.n	8001234 <HAL_RCC_OscConfig+0xd4>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d10c      	bne.n	80011f8 <HAL_RCC_OscConfig+0x98>
 80011de:	4b7b      	ldr	r3, [pc, #492]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a7a      	ldr	r2, [pc, #488]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	4b78      	ldr	r3, [pc, #480]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a77      	ldr	r2, [pc, #476]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	e01d      	b.n	8001234 <HAL_RCC_OscConfig+0xd4>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001200:	d10c      	bne.n	800121c <HAL_RCC_OscConfig+0xbc>
 8001202:	4b72      	ldr	r3, [pc, #456]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a71      	ldr	r2, [pc, #452]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	4b6f      	ldr	r3, [pc, #444]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a6e      	ldr	r2, [pc, #440]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	e00b      	b.n	8001234 <HAL_RCC_OscConfig+0xd4>
 800121c:	4b6b      	ldr	r3, [pc, #428]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a6a      	ldr	r2, [pc, #424]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	4b68      	ldr	r3, [pc, #416]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a67      	ldr	r2, [pc, #412]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800122e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001232:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d013      	beq.n	8001264 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123c:	f7ff fcfa 	bl	8000c34 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001244:	f7ff fcf6 	bl	8000c34 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b64      	cmp	r3, #100	; 0x64
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e200      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001256:	4b5d      	ldr	r3, [pc, #372]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0f0      	beq.n	8001244 <HAL_RCC_OscConfig+0xe4>
 8001262:	e014      	b.n	800128e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001264:	f7ff fce6 	bl	8000c34 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800126c:	f7ff fce2 	bl	8000c34 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b64      	cmp	r3, #100	; 0x64
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e1ec      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127e:	4b53      	ldr	r3, [pc, #332]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f0      	bne.n	800126c <HAL_RCC_OscConfig+0x10c>
 800128a:	e000      	b.n	800128e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800128c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d063      	beq.n	8001362 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800129a:	4b4c      	ldr	r3, [pc, #304]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 030c 	and.w	r3, r3, #12
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00b      	beq.n	80012be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012a6:	4b49      	ldr	r3, [pc, #292]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 030c 	and.w	r3, r3, #12
 80012ae:	2b08      	cmp	r3, #8
 80012b0:	d11c      	bne.n	80012ec <HAL_RCC_OscConfig+0x18c>
 80012b2:	4b46      	ldr	r3, [pc, #280]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d116      	bne.n	80012ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012be:	4b43      	ldr	r3, [pc, #268]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d005      	beq.n	80012d6 <HAL_RCC_OscConfig+0x176>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d001      	beq.n	80012d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e1c0      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d6:	4b3d      	ldr	r3, [pc, #244]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	4939      	ldr	r1, [pc, #228]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ea:	e03a      	b.n	8001362 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d020      	beq.n	8001336 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012f4:	4b36      	ldr	r3, [pc, #216]	; (80013d0 <HAL_RCC_OscConfig+0x270>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fa:	f7ff fc9b 	bl	8000c34 <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001302:	f7ff fc97 	bl	8000c34 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e1a1      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001314:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0f0      	beq.n	8001302 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001320:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	4927      	ldr	r1, [pc, #156]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001330:	4313      	orrs	r3, r2
 8001332:	600b      	str	r3, [r1, #0]
 8001334:	e015      	b.n	8001362 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001336:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <HAL_RCC_OscConfig+0x270>)
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133c:	f7ff fc7a 	bl	8000c34 <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001344:	f7ff fc76 	bl	8000c34 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e180      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001356:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1f0      	bne.n	8001344 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0308 	and.w	r3, r3, #8
 800136a:	2b00      	cmp	r3, #0
 800136c:	d03a      	beq.n	80013e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d019      	beq.n	80013aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <HAL_RCC_OscConfig+0x274>)
 8001378:	2201      	movs	r2, #1
 800137a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137c:	f7ff fc5a 	bl	8000c34 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001384:	f7ff fc56 	bl	8000c34 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e160      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001396:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f0      	beq.n	8001384 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013a2:	2001      	movs	r0, #1
 80013a4:	f000 fad8 	bl	8001958 <RCC_Delay>
 80013a8:	e01c      	b.n	80013e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013aa:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <HAL_RCC_OscConfig+0x274>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b0:	f7ff fc40 	bl	8000c34 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b6:	e00f      	b.n	80013d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013b8:	f7ff fc3c 	bl	8000c34 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d908      	bls.n	80013d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e146      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000
 80013d0:	42420000 	.word	0x42420000
 80013d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d8:	4b92      	ldr	r3, [pc, #584]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80013da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1e9      	bne.n	80013b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 80a6 	beq.w	800153e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013f6:	4b8b      	ldr	r3, [pc, #556]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10d      	bne.n	800141e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001402:	4b88      	ldr	r3, [pc, #544]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	4a87      	ldr	r2, [pc, #540]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800140c:	61d3      	str	r3, [r2, #28]
 800140e:	4b85      	ldr	r3, [pc, #532]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800141a:	2301      	movs	r3, #1
 800141c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141e:	4b82      	ldr	r3, [pc, #520]	; (8001628 <HAL_RCC_OscConfig+0x4c8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001426:	2b00      	cmp	r3, #0
 8001428:	d118      	bne.n	800145c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800142a:	4b7f      	ldr	r3, [pc, #508]	; (8001628 <HAL_RCC_OscConfig+0x4c8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a7e      	ldr	r2, [pc, #504]	; (8001628 <HAL_RCC_OscConfig+0x4c8>)
 8001430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001436:	f7ff fbfd 	bl	8000c34 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800143e:	f7ff fbf9 	bl	8000c34 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b64      	cmp	r3, #100	; 0x64
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e103      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001450:	4b75      	ldr	r3, [pc, #468]	; (8001628 <HAL_RCC_OscConfig+0x4c8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0f0      	beq.n	800143e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d106      	bne.n	8001472 <HAL_RCC_OscConfig+0x312>
 8001464:	4b6f      	ldr	r3, [pc, #444]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	4a6e      	ldr	r2, [pc, #440]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	6213      	str	r3, [r2, #32]
 8001470:	e02d      	b.n	80014ce <HAL_RCC_OscConfig+0x36e>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10c      	bne.n	8001494 <HAL_RCC_OscConfig+0x334>
 800147a:	4b6a      	ldr	r3, [pc, #424]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	4a69      	ldr	r2, [pc, #420]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001480:	f023 0301 	bic.w	r3, r3, #1
 8001484:	6213      	str	r3, [r2, #32]
 8001486:	4b67      	ldr	r3, [pc, #412]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	4a66      	ldr	r2, [pc, #408]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800148c:	f023 0304 	bic.w	r3, r3, #4
 8001490:	6213      	str	r3, [r2, #32]
 8001492:	e01c      	b.n	80014ce <HAL_RCC_OscConfig+0x36e>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	2b05      	cmp	r3, #5
 800149a:	d10c      	bne.n	80014b6 <HAL_RCC_OscConfig+0x356>
 800149c:	4b61      	ldr	r3, [pc, #388]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	4a60      	ldr	r2, [pc, #384]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014a2:	f043 0304 	orr.w	r3, r3, #4
 80014a6:	6213      	str	r3, [r2, #32]
 80014a8:	4b5e      	ldr	r3, [pc, #376]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	4a5d      	ldr	r2, [pc, #372]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6213      	str	r3, [r2, #32]
 80014b4:	e00b      	b.n	80014ce <HAL_RCC_OscConfig+0x36e>
 80014b6:	4b5b      	ldr	r3, [pc, #364]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014b8:	6a1b      	ldr	r3, [r3, #32]
 80014ba:	4a5a      	ldr	r2, [pc, #360]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014bc:	f023 0301 	bic.w	r3, r3, #1
 80014c0:	6213      	str	r3, [r2, #32]
 80014c2:	4b58      	ldr	r3, [pc, #352]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	4a57      	ldr	r2, [pc, #348]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014c8:	f023 0304 	bic.w	r3, r3, #4
 80014cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d015      	beq.n	8001502 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d6:	f7ff fbad 	bl	8000c34 <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014dc:	e00a      	b.n	80014f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014de:	f7ff fba9 	bl	8000c34 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e0b1      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f4:	4b4b      	ldr	r3, [pc, #300]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0ee      	beq.n	80014de <HAL_RCC_OscConfig+0x37e>
 8001500:	e014      	b.n	800152c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001502:	f7ff fb97 	bl	8000c34 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001508:	e00a      	b.n	8001520 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800150a:	f7ff fb93 	bl	8000c34 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	f241 3288 	movw	r2, #5000	; 0x1388
 8001518:	4293      	cmp	r3, r2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e09b      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001520:	4b40      	ldr	r3, [pc, #256]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1ee      	bne.n	800150a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800152c:	7dfb      	ldrb	r3, [r7, #23]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d105      	bne.n	800153e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001532:	4b3c      	ldr	r3, [pc, #240]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	4a3b      	ldr	r2, [pc, #236]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800153c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	2b00      	cmp	r3, #0
 8001544:	f000 8087 	beq.w	8001656 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001548:	4b36      	ldr	r3, [pc, #216]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 030c 	and.w	r3, r3, #12
 8001550:	2b08      	cmp	r3, #8
 8001552:	d061      	beq.n	8001618 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	2b02      	cmp	r3, #2
 800155a:	d146      	bne.n	80015ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155c:	4b33      	ldr	r3, [pc, #204]	; (800162c <HAL_RCC_OscConfig+0x4cc>)
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001562:	f7ff fb67 	bl	8000c34 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800156a:	f7ff fb63 	bl	8000c34 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e06d      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800157c:	4b29      	ldr	r3, [pc, #164]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1f0      	bne.n	800156a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001590:	d108      	bne.n	80015a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001592:	4b24      	ldr	r3, [pc, #144]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	4921      	ldr	r1, [pc, #132]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015a4:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a19      	ldr	r1, [r3, #32]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b4:	430b      	orrs	r3, r1
 80015b6:	491b      	ldr	r1, [pc, #108]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <HAL_RCC_OscConfig+0x4cc>)
 80015be:	2201      	movs	r2, #1
 80015c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c2:	f7ff fb37 	bl	8000c34 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ca:	f7ff fb33 	bl	8000c34 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e03d      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015dc:	4b11      	ldr	r3, [pc, #68]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0f0      	beq.n	80015ca <HAL_RCC_OscConfig+0x46a>
 80015e8:	e035      	b.n	8001656 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <HAL_RCC_OscConfig+0x4cc>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fb20 	bl	8000c34 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f8:	f7ff fb1c 	bl	8000c34 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e026      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x498>
 8001616:	e01e      	b.n	8001656 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	69db      	ldr	r3, [r3, #28]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d107      	bne.n	8001630 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e019      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
 8001624:	40021000 	.word	0x40021000
 8001628:	40007000 	.word	0x40007000
 800162c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001630:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <HAL_RCC_OscConfig+0x500>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	429a      	cmp	r2, r3
 8001642:	d106      	bne.n	8001652 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800164e:	429a      	cmp	r2, r3
 8001650:	d001      	beq.n	8001656 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40021000 	.word	0x40021000

08001664 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0d0      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001678:	4b6a      	ldr	r3, [pc, #424]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d910      	bls.n	80016a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001686:	4b67      	ldr	r3, [pc, #412]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f023 0207 	bic.w	r2, r3, #7
 800168e:	4965      	ldr	r1, [pc, #404]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	4313      	orrs	r3, r2
 8001694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001696:	4b63      	ldr	r3, [pc, #396]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d001      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e0b8      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d020      	beq.n	80016f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d005      	beq.n	80016cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016c0:	4b59      	ldr	r3, [pc, #356]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	4a58      	ldr	r2, [pc, #352]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016d8:	4b53      	ldr	r3, [pc, #332]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	4a52      	ldr	r2, [pc, #328]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e4:	4b50      	ldr	r3, [pc, #320]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	494d      	ldr	r1, [pc, #308]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d040      	beq.n	8001784 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d107      	bne.n	800171a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170a:	4b47      	ldr	r3, [pc, #284]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d115      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e07f      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d107      	bne.n	8001732 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001722:	4b41      	ldr	r3, [pc, #260]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d109      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e073      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001732:	4b3d      	ldr	r3, [pc, #244]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e06b      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001742:	4b39      	ldr	r3, [pc, #228]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f023 0203 	bic.w	r2, r3, #3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	4936      	ldr	r1, [pc, #216]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001754:	f7ff fa6e 	bl	8000c34 <HAL_GetTick>
 8001758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175a:	e00a      	b.n	8001772 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800175c:	f7ff fa6a 	bl	8000c34 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f241 3288 	movw	r2, #5000	; 0x1388
 800176a:	4293      	cmp	r3, r2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e053      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001772:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 020c 	and.w	r2, r3, #12
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	429a      	cmp	r2, r3
 8001782:	d1eb      	bne.n	800175c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001784:	4b27      	ldr	r3, [pc, #156]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d210      	bcs.n	80017b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001792:	4b24      	ldr	r3, [pc, #144]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f023 0207 	bic.w	r2, r3, #7
 800179a:	4922      	ldr	r1, [pc, #136]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	4313      	orrs	r3, r2
 80017a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a2:	4b20      	ldr	r3, [pc, #128]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d001      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e032      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d008      	beq.n	80017d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017c0:	4b19      	ldr	r3, [pc, #100]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	4916      	ldr	r1, [pc, #88]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d009      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017de:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	490e      	ldr	r1, [pc, #56]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017f2:	f000 f821 	bl	8001838 <HAL_RCC_GetSysClockFreq>
 80017f6:	4602      	mov	r2, r0
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	490a      	ldr	r1, [pc, #40]	; (800182c <HAL_RCC_ClockConfig+0x1c8>)
 8001804:	5ccb      	ldrb	r3, [r1, r3]
 8001806:	fa22 f303 	lsr.w	r3, r2, r3
 800180a:	4a09      	ldr	r2, [pc, #36]	; (8001830 <HAL_RCC_ClockConfig+0x1cc>)
 800180c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <HAL_RCC_ClockConfig+0x1d0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff f9cc 	bl	8000bb0 <HAL_InitTick>

  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40022000 	.word	0x40022000
 8001828:	40021000 	.word	0x40021000
 800182c:	08003388 	.word	0x08003388
 8001830:	20000000 	.word	0x20000000
 8001834:	20000004 	.word	0x20000004

08001838 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001838:	b490      	push	{r4, r7}
 800183a:	b08a      	sub	sp, #40	; 0x28
 800183c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800183e:	4b29      	ldr	r3, [pc, #164]	; (80018e4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001840:	1d3c      	adds	r4, r7, #4
 8001842:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001844:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001848:	f240 2301 	movw	r3, #513	; 0x201
 800184c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
 8001852:	2300      	movs	r3, #0
 8001854:	61bb      	str	r3, [r7, #24]
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800185e:	2300      	movs	r3, #0
 8001860:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001862:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	2b04      	cmp	r3, #4
 8001870:	d002      	beq.n	8001878 <HAL_RCC_GetSysClockFreq+0x40>
 8001872:	2b08      	cmp	r3, #8
 8001874:	d003      	beq.n	800187e <HAL_RCC_GetSysClockFreq+0x46>
 8001876:	e02b      	b.n	80018d0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001878:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800187a:	623b      	str	r3, [r7, #32]
      break;
 800187c:	e02b      	b.n	80018d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	0c9b      	lsrs	r3, r3, #18
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	3328      	adds	r3, #40	; 0x28
 8001888:	443b      	add	r3, r7
 800188a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800188e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d012      	beq.n	80018c0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800189a:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	0c5b      	lsrs	r3, r3, #17
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	3328      	adds	r3, #40	; 0x28
 80018a6:	443b      	add	r3, r7
 80018a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80018ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	4a0e      	ldr	r2, [pc, #56]	; (80018ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80018b2:	fb03 f202 	mul.w	r2, r3, r2
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
 80018be:	e004      	b.n	80018ca <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	4a0b      	ldr	r2, [pc, #44]	; (80018f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018c4:	fb02 f303 	mul.w	r3, r2, r3
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	623b      	str	r3, [r7, #32]
      break;
 80018ce:	e002      	b.n	80018d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80018d2:	623b      	str	r3, [r7, #32]
      break;
 80018d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018d6:	6a3b      	ldr	r3, [r7, #32]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3728      	adds	r7, #40	; 0x28
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc90      	pop	{r4, r7}
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	08003378 	.word	0x08003378
 80018e8:	40021000 	.word	0x40021000
 80018ec:	007a1200 	.word	0x007a1200
 80018f0:	003d0900 	.word	0x003d0900

080018f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018f8:	4b02      	ldr	r3, [pc, #8]	; (8001904 <HAL_RCC_GetHCLKFreq+0x10>)
 80018fa:	681b      	ldr	r3, [r3, #0]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	20000000 	.word	0x20000000

08001908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800190c:	f7ff fff2 	bl	80018f4 <HAL_RCC_GetHCLKFreq>
 8001910:	4602      	mov	r2, r0
 8001912:	4b05      	ldr	r3, [pc, #20]	; (8001928 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	0a1b      	lsrs	r3, r3, #8
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	4903      	ldr	r1, [pc, #12]	; (800192c <HAL_RCC_GetPCLK1Freq+0x24>)
 800191e:	5ccb      	ldrb	r3, [r1, r3]
 8001920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001924:	4618      	mov	r0, r3
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40021000 	.word	0x40021000
 800192c:	08003398 	.word	0x08003398

08001930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001934:	f7ff ffde 	bl	80018f4 <HAL_RCC_GetHCLKFreq>
 8001938:	4602      	mov	r2, r0
 800193a:	4b05      	ldr	r3, [pc, #20]	; (8001950 <HAL_RCC_GetPCLK2Freq+0x20>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	0adb      	lsrs	r3, r3, #11
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	4903      	ldr	r1, [pc, #12]	; (8001954 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001946:	5ccb      	ldrb	r3, [r1, r3]
 8001948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800194c:	4618      	mov	r0, r3
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40021000 	.word	0x40021000
 8001954:	08003398 	.word	0x08003398

08001958 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001960:	4b0a      	ldr	r3, [pc, #40]	; (800198c <RCC_Delay+0x34>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <RCC_Delay+0x38>)
 8001966:	fba2 2303 	umull	r2, r3, r2, r3
 800196a:	0a5b      	lsrs	r3, r3, #9
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	fb02 f303 	mul.w	r3, r2, r3
 8001972:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001974:	bf00      	nop
  }
  while (Delay --);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	1e5a      	subs	r2, r3, #1
 800197a:	60fa      	str	r2, [r7, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1f9      	bne.n	8001974 <RCC_Delay+0x1c>
}
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr
 800198c:	20000000 	.word	0x20000000
 8001990:	10624dd3 	.word	0x10624dd3

08001994 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e03f      	b.n	8001a26 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d106      	bne.n	80019c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7fe ffc0 	bl	8000940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2224      	movs	r2, #36	; 0x24
 80019c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68da      	ldr	r2, [r3, #12]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 f9a7 	bl	8001d2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	691a      	ldr	r2, [r3, #16]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	695a      	ldr	r2, [r3, #20]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2220      	movs	r2, #32
 8001a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2220      	movs	r2, #32
 8001a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b08a      	sub	sp, #40	; 0x28
 8001a32:	af02      	add	r7, sp, #8
 8001a34:	60f8      	str	r0, [r7, #12]
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	603b      	str	r3, [r7, #0]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b20      	cmp	r3, #32
 8001a4c:	d17c      	bne.n	8001b48 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d002      	beq.n	8001a5a <HAL_UART_Transmit+0x2c>
 8001a54:	88fb      	ldrh	r3, [r7, #6]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e075      	b.n	8001b4a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d101      	bne.n	8001a6c <HAL_UART_Transmit+0x3e>
 8001a68:	2302      	movs	r3, #2
 8001a6a:	e06e      	b.n	8001b4a <HAL_UART_Transmit+0x11c>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2221      	movs	r2, #33	; 0x21
 8001a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a82:	f7ff f8d7 	bl	8000c34 <HAL_GetTick>
 8001a86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	88fa      	ldrh	r2, [r7, #6]
 8001a8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	88fa      	ldrh	r2, [r7, #6]
 8001a92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a9c:	d108      	bne.n	8001ab0 <HAL_UART_Transmit+0x82>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d104      	bne.n	8001ab0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	61bb      	str	r3, [r7, #24]
 8001aae:	e003      	b.n	8001ab8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001ac0:	e02a      	b.n	8001b18 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2180      	movs	r1, #128	; 0x80
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f000 f8e2 	bl	8001c96 <UART_WaitOnFlagUntilTimeout>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e036      	b.n	8001b4a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10b      	bne.n	8001afa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001af0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	3302      	adds	r3, #2
 8001af6:	61bb      	str	r3, [r7, #24]
 8001af8:	e007      	b.n	8001b0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	781a      	ldrb	r2, [r3, #0]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	3301      	adds	r3, #1
 8001b08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	3b01      	subs	r3, #1
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1cf      	bne.n	8001ac2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2140      	movs	r1, #64	; 0x40
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f000 f8b2 	bl	8001c96 <UART_WaitOnFlagUntilTimeout>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e006      	b.n	8001b4a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2220      	movs	r2, #32
 8001b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	e000      	b.n	8001b4a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001b48:	2302      	movs	r3, #2
  }
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3720      	adds	r7, #32
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b08a      	sub	sp, #40	; 0x28
 8001b56:	af02      	add	r7, sp, #8
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	603b      	str	r3, [r7, #0]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b20      	cmp	r3, #32
 8001b70:	f040 808c 	bne.w	8001c8c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d002      	beq.n	8001b80 <HAL_UART_Receive+0x2e>
 8001b7a:	88fb      	ldrh	r3, [r7, #6]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e084      	b.n	8001c8e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d101      	bne.n	8001b92 <HAL_UART_Receive+0x40>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e07d      	b.n	8001c8e <HAL_UART_Receive+0x13c>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2222      	movs	r2, #34	; 0x22
 8001ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bae:	f7ff f841 	bl	8000c34 <HAL_GetTick>
 8001bb2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	88fa      	ldrh	r2, [r7, #6]
 8001bb8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	88fa      	ldrh	r2, [r7, #6]
 8001bbe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bc8:	d108      	bne.n	8001bdc <HAL_UART_Receive+0x8a>
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d104      	bne.n	8001bdc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	61bb      	str	r3, [r7, #24]
 8001bda:	e003      	b.n	8001be4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001bec:	e043      	b.n	8001c76 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2120      	movs	r1, #32
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f000 f84c 	bl	8001c96 <UART_WaitOnFlagUntilTimeout>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e042      	b.n	8001c8e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10c      	bne.n	8001c28 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	3302      	adds	r3, #2
 8001c24:	61bb      	str	r3, [r7, #24]
 8001c26:	e01f      	b.n	8001c68 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c30:	d007      	beq.n	8001c42 <HAL_UART_Receive+0xf0>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10a      	bne.n	8001c50 <HAL_UART_Receive+0xfe>
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d106      	bne.n	8001c50 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	701a      	strb	r2, [r3, #0]
 8001c4e:	e008      	b.n	8001c62 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	3301      	adds	r3, #1
 8001c66:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1b6      	bne.n	8001bee <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2220      	movs	r2, #32
 8001c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	e000      	b.n	8001c8e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001c8c:	2302      	movs	r3, #2
  }
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3720      	adds	r7, #32
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b084      	sub	sp, #16
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	60f8      	str	r0, [r7, #12]
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	603b      	str	r3, [r7, #0]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ca6:	e02c      	b.n	8001d02 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cae:	d028      	beq.n	8001d02 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d007      	beq.n	8001cc6 <UART_WaitOnFlagUntilTimeout+0x30>
 8001cb6:	f7fe ffbd 	bl	8000c34 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d21d      	bcs.n	8001d02 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68da      	ldr	r2, [r3, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001cd4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	695a      	ldr	r2, [r3, #20]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 0201 	bic.w	r2, r2, #1
 8001ce4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2220      	movs	r2, #32
 8001cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2220      	movs	r2, #32
 8001cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e00f      	b.n	8001d22 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	68ba      	ldr	r2, [r7, #8]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	bf0c      	ite	eq
 8001d12:	2301      	moveq	r3, #1
 8001d14:	2300      	movne	r3, #0
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	461a      	mov	r2, r3
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d0c3      	beq.n	8001ca8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001d66:	f023 030c 	bic.w	r3, r3, #12
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6812      	ldr	r2, [r2, #0]
 8001d6e:	68b9      	ldr	r1, [r7, #8]
 8001d70:	430b      	orrs	r3, r1
 8001d72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699a      	ldr	r2, [r3, #24]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a2c      	ldr	r2, [pc, #176]	; (8001e40 <UART_SetConfig+0x114>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d103      	bne.n	8001d9c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001d94:	f7ff fdcc 	bl	8001930 <HAL_RCC_GetPCLK2Freq>
 8001d98:	60f8      	str	r0, [r7, #12]
 8001d9a:	e002      	b.n	8001da2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001d9c:	f7ff fdb4 	bl	8001908 <HAL_RCC_GetPCLK1Freq>
 8001da0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	4613      	mov	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	009a      	lsls	r2, r3, #2
 8001dac:	441a      	add	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db8:	4a22      	ldr	r2, [pc, #136]	; (8001e44 <UART_SetConfig+0x118>)
 8001dba:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbe:	095b      	lsrs	r3, r3, #5
 8001dc0:	0119      	lsls	r1, r3, #4
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	009a      	lsls	r2, r3, #2
 8001dcc:	441a      	add	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dd8:	4b1a      	ldr	r3, [pc, #104]	; (8001e44 <UART_SetConfig+0x118>)
 8001dda:	fba3 0302 	umull	r0, r3, r3, r2
 8001dde:	095b      	lsrs	r3, r3, #5
 8001de0:	2064      	movs	r0, #100	; 0x64
 8001de2:	fb00 f303 	mul.w	r3, r0, r3
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	011b      	lsls	r3, r3, #4
 8001dea:	3332      	adds	r3, #50	; 0x32
 8001dec:	4a15      	ldr	r2, [pc, #84]	; (8001e44 <UART_SetConfig+0x118>)
 8001dee:	fba2 2303 	umull	r2, r3, r2, r3
 8001df2:	095b      	lsrs	r3, r3, #5
 8001df4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001df8:	4419      	add	r1, r3
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	009a      	lsls	r2, r3, #2
 8001e04:	441a      	add	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <UART_SetConfig+0x118>)
 8001e12:	fba3 0302 	umull	r0, r3, r3, r2
 8001e16:	095b      	lsrs	r3, r3, #5
 8001e18:	2064      	movs	r0, #100	; 0x64
 8001e1a:	fb00 f303 	mul.w	r3, r0, r3
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	011b      	lsls	r3, r3, #4
 8001e22:	3332      	adds	r3, #50	; 0x32
 8001e24:	4a07      	ldr	r2, [pc, #28]	; (8001e44 <UART_SetConfig+0x118>)
 8001e26:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2a:	095b      	lsrs	r3, r3, #5
 8001e2c:	f003 020f 	and.w	r2, r3, #15
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	440a      	add	r2, r1
 8001e36:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001e38:	bf00      	nop
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40013800 	.word	0x40013800
 8001e44:	51eb851f 	.word	0x51eb851f

08001e48 <__errno>:
 8001e48:	4b01      	ldr	r3, [pc, #4]	; (8001e50 <__errno+0x8>)
 8001e4a:	6818      	ldr	r0, [r3, #0]
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	2000000c 	.word	0x2000000c

08001e54 <__libc_init_array>:
 8001e54:	b570      	push	{r4, r5, r6, lr}
 8001e56:	2600      	movs	r6, #0
 8001e58:	4d0c      	ldr	r5, [pc, #48]	; (8001e8c <__libc_init_array+0x38>)
 8001e5a:	4c0d      	ldr	r4, [pc, #52]	; (8001e90 <__libc_init_array+0x3c>)
 8001e5c:	1b64      	subs	r4, r4, r5
 8001e5e:	10a4      	asrs	r4, r4, #2
 8001e60:	42a6      	cmp	r6, r4
 8001e62:	d109      	bne.n	8001e78 <__libc_init_array+0x24>
 8001e64:	f001 f9a8 	bl	80031b8 <_init>
 8001e68:	2600      	movs	r6, #0
 8001e6a:	4d0a      	ldr	r5, [pc, #40]	; (8001e94 <__libc_init_array+0x40>)
 8001e6c:	4c0a      	ldr	r4, [pc, #40]	; (8001e98 <__libc_init_array+0x44>)
 8001e6e:	1b64      	subs	r4, r4, r5
 8001e70:	10a4      	asrs	r4, r4, #2
 8001e72:	42a6      	cmp	r6, r4
 8001e74:	d105      	bne.n	8001e82 <__libc_init_array+0x2e>
 8001e76:	bd70      	pop	{r4, r5, r6, pc}
 8001e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e7c:	4798      	blx	r3
 8001e7e:	3601      	adds	r6, #1
 8001e80:	e7ee      	b.n	8001e60 <__libc_init_array+0xc>
 8001e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e86:	4798      	blx	r3
 8001e88:	3601      	adds	r6, #1
 8001e8a:	e7f2      	b.n	8001e72 <__libc_init_array+0x1e>
 8001e8c:	08003438 	.word	0x08003438
 8001e90:	08003438 	.word	0x08003438
 8001e94:	08003438 	.word	0x08003438
 8001e98:	0800343c 	.word	0x0800343c

08001e9c <memset>:
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	4402      	add	r2, r0
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d100      	bne.n	8001ea6 <memset+0xa>
 8001ea4:	4770      	bx	lr
 8001ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8001eaa:	e7f9      	b.n	8001ea0 <memset+0x4>

08001eac <iprintf>:
 8001eac:	b40f      	push	{r0, r1, r2, r3}
 8001eae:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <iprintf+0x2c>)
 8001eb0:	b513      	push	{r0, r1, r4, lr}
 8001eb2:	681c      	ldr	r4, [r3, #0]
 8001eb4:	b124      	cbz	r4, 8001ec0 <iprintf+0x14>
 8001eb6:	69a3      	ldr	r3, [r4, #24]
 8001eb8:	b913      	cbnz	r3, 8001ec0 <iprintf+0x14>
 8001eba:	4620      	mov	r0, r4
 8001ebc:	f000 f89c 	bl	8001ff8 <__sinit>
 8001ec0:	ab05      	add	r3, sp, #20
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	9a04      	ldr	r2, [sp, #16]
 8001ec6:	68a1      	ldr	r1, [r4, #8]
 8001ec8:	9301      	str	r3, [sp, #4]
 8001eca:	f000 fb4d 	bl	8002568 <_vfiprintf_r>
 8001ece:	b002      	add	sp, #8
 8001ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ed4:	b004      	add	sp, #16
 8001ed6:	4770      	bx	lr
 8001ed8:	2000000c 	.word	0x2000000c

08001edc <siprintf>:
 8001edc:	b40e      	push	{r1, r2, r3}
 8001ede:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001ee2:	b500      	push	{lr}
 8001ee4:	b09c      	sub	sp, #112	; 0x70
 8001ee6:	ab1d      	add	r3, sp, #116	; 0x74
 8001ee8:	9002      	str	r0, [sp, #8]
 8001eea:	9006      	str	r0, [sp, #24]
 8001eec:	9107      	str	r1, [sp, #28]
 8001eee:	9104      	str	r1, [sp, #16]
 8001ef0:	4808      	ldr	r0, [pc, #32]	; (8001f14 <siprintf+0x38>)
 8001ef2:	4909      	ldr	r1, [pc, #36]	; (8001f18 <siprintf+0x3c>)
 8001ef4:	f853 2b04 	ldr.w	r2, [r3], #4
 8001ef8:	9105      	str	r1, [sp, #20]
 8001efa:	6800      	ldr	r0, [r0, #0]
 8001efc:	a902      	add	r1, sp, #8
 8001efe:	9301      	str	r3, [sp, #4]
 8001f00:	f000 fa0a 	bl	8002318 <_svfiprintf_r>
 8001f04:	2200      	movs	r2, #0
 8001f06:	9b02      	ldr	r3, [sp, #8]
 8001f08:	701a      	strb	r2, [r3, #0]
 8001f0a:	b01c      	add	sp, #112	; 0x70
 8001f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001f10:	b003      	add	sp, #12
 8001f12:	4770      	bx	lr
 8001f14:	2000000c 	.word	0x2000000c
 8001f18:	ffff0208 	.word	0xffff0208

08001f1c <strstr>:
 8001f1c:	780a      	ldrb	r2, [r1, #0]
 8001f1e:	b570      	push	{r4, r5, r6, lr}
 8001f20:	b96a      	cbnz	r2, 8001f3e <strstr+0x22>
 8001f22:	bd70      	pop	{r4, r5, r6, pc}
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d109      	bne.n	8001f3c <strstr+0x20>
 8001f28:	460c      	mov	r4, r1
 8001f2a:	4605      	mov	r5, r0
 8001f2c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0f6      	beq.n	8001f22 <strstr+0x6>
 8001f34:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8001f38:	429e      	cmp	r6, r3
 8001f3a:	d0f7      	beq.n	8001f2c <strstr+0x10>
 8001f3c:	3001      	adds	r0, #1
 8001f3e:	7803      	ldrb	r3, [r0, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1ef      	bne.n	8001f24 <strstr+0x8>
 8001f44:	4618      	mov	r0, r3
 8001f46:	e7ec      	b.n	8001f22 <strstr+0x6>

08001f48 <std>:
 8001f48:	2300      	movs	r3, #0
 8001f4a:	b510      	push	{r4, lr}
 8001f4c:	4604      	mov	r4, r0
 8001f4e:	e9c0 3300 	strd	r3, r3, [r0]
 8001f52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001f56:	6083      	str	r3, [r0, #8]
 8001f58:	8181      	strh	r1, [r0, #12]
 8001f5a:	6643      	str	r3, [r0, #100]	; 0x64
 8001f5c:	81c2      	strh	r2, [r0, #14]
 8001f5e:	6183      	str	r3, [r0, #24]
 8001f60:	4619      	mov	r1, r3
 8001f62:	2208      	movs	r2, #8
 8001f64:	305c      	adds	r0, #92	; 0x5c
 8001f66:	f7ff ff99 	bl	8001e9c <memset>
 8001f6a:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <std+0x38>)
 8001f6c:	6224      	str	r4, [r4, #32]
 8001f6e:	6263      	str	r3, [r4, #36]	; 0x24
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <std+0x3c>)
 8001f72:	62a3      	str	r3, [r4, #40]	; 0x28
 8001f74:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <std+0x40>)
 8001f76:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001f78:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <std+0x44>)
 8001f7a:	6323      	str	r3, [r4, #48]	; 0x30
 8001f7c:	bd10      	pop	{r4, pc}
 8001f7e:	bf00      	nop
 8001f80:	08002b15 	.word	0x08002b15
 8001f84:	08002b37 	.word	0x08002b37
 8001f88:	08002b6f 	.word	0x08002b6f
 8001f8c:	08002b93 	.word	0x08002b93

08001f90 <_cleanup_r>:
 8001f90:	4901      	ldr	r1, [pc, #4]	; (8001f98 <_cleanup_r+0x8>)
 8001f92:	f000 b8af 	b.w	80020f4 <_fwalk_reent>
 8001f96:	bf00      	nop
 8001f98:	08002e65 	.word	0x08002e65

08001f9c <__sfmoreglue>:
 8001f9c:	2268      	movs	r2, #104	; 0x68
 8001f9e:	b570      	push	{r4, r5, r6, lr}
 8001fa0:	1e4d      	subs	r5, r1, #1
 8001fa2:	4355      	muls	r5, r2
 8001fa4:	460e      	mov	r6, r1
 8001fa6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001faa:	f000 f8e5 	bl	8002178 <_malloc_r>
 8001fae:	4604      	mov	r4, r0
 8001fb0:	b140      	cbz	r0, 8001fc4 <__sfmoreglue+0x28>
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	e9c0 1600 	strd	r1, r6, [r0]
 8001fb8:	300c      	adds	r0, #12
 8001fba:	60a0      	str	r0, [r4, #8]
 8001fbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001fc0:	f7ff ff6c 	bl	8001e9c <memset>
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	bd70      	pop	{r4, r5, r6, pc}

08001fc8 <__sfp_lock_acquire>:
 8001fc8:	4801      	ldr	r0, [pc, #4]	; (8001fd0 <__sfp_lock_acquire+0x8>)
 8001fca:	f000 b8b3 	b.w	8002134 <__retarget_lock_acquire_recursive>
 8001fce:	bf00      	nop
 8001fd0:	200001a5 	.word	0x200001a5

08001fd4 <__sfp_lock_release>:
 8001fd4:	4801      	ldr	r0, [pc, #4]	; (8001fdc <__sfp_lock_release+0x8>)
 8001fd6:	f000 b8ae 	b.w	8002136 <__retarget_lock_release_recursive>
 8001fda:	bf00      	nop
 8001fdc:	200001a5 	.word	0x200001a5

08001fe0 <__sinit_lock_acquire>:
 8001fe0:	4801      	ldr	r0, [pc, #4]	; (8001fe8 <__sinit_lock_acquire+0x8>)
 8001fe2:	f000 b8a7 	b.w	8002134 <__retarget_lock_acquire_recursive>
 8001fe6:	bf00      	nop
 8001fe8:	200001a6 	.word	0x200001a6

08001fec <__sinit_lock_release>:
 8001fec:	4801      	ldr	r0, [pc, #4]	; (8001ff4 <__sinit_lock_release+0x8>)
 8001fee:	f000 b8a2 	b.w	8002136 <__retarget_lock_release_recursive>
 8001ff2:	bf00      	nop
 8001ff4:	200001a6 	.word	0x200001a6

08001ff8 <__sinit>:
 8001ff8:	b510      	push	{r4, lr}
 8001ffa:	4604      	mov	r4, r0
 8001ffc:	f7ff fff0 	bl	8001fe0 <__sinit_lock_acquire>
 8002000:	69a3      	ldr	r3, [r4, #24]
 8002002:	b11b      	cbz	r3, 800200c <__sinit+0x14>
 8002004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002008:	f7ff bff0 	b.w	8001fec <__sinit_lock_release>
 800200c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002010:	6523      	str	r3, [r4, #80]	; 0x50
 8002012:	4b13      	ldr	r3, [pc, #76]	; (8002060 <__sinit+0x68>)
 8002014:	4a13      	ldr	r2, [pc, #76]	; (8002064 <__sinit+0x6c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	62a2      	str	r2, [r4, #40]	; 0x28
 800201a:	42a3      	cmp	r3, r4
 800201c:	bf08      	it	eq
 800201e:	2301      	moveq	r3, #1
 8002020:	4620      	mov	r0, r4
 8002022:	bf08      	it	eq
 8002024:	61a3      	streq	r3, [r4, #24]
 8002026:	f000 f81f 	bl	8002068 <__sfp>
 800202a:	6060      	str	r0, [r4, #4]
 800202c:	4620      	mov	r0, r4
 800202e:	f000 f81b 	bl	8002068 <__sfp>
 8002032:	60a0      	str	r0, [r4, #8]
 8002034:	4620      	mov	r0, r4
 8002036:	f000 f817 	bl	8002068 <__sfp>
 800203a:	2200      	movs	r2, #0
 800203c:	2104      	movs	r1, #4
 800203e:	60e0      	str	r0, [r4, #12]
 8002040:	6860      	ldr	r0, [r4, #4]
 8002042:	f7ff ff81 	bl	8001f48 <std>
 8002046:	2201      	movs	r2, #1
 8002048:	2109      	movs	r1, #9
 800204a:	68a0      	ldr	r0, [r4, #8]
 800204c:	f7ff ff7c 	bl	8001f48 <std>
 8002050:	2202      	movs	r2, #2
 8002052:	2112      	movs	r1, #18
 8002054:	68e0      	ldr	r0, [r4, #12]
 8002056:	f7ff ff77 	bl	8001f48 <std>
 800205a:	2301      	movs	r3, #1
 800205c:	61a3      	str	r3, [r4, #24]
 800205e:	e7d1      	b.n	8002004 <__sinit+0xc>
 8002060:	080033a0 	.word	0x080033a0
 8002064:	08001f91 	.word	0x08001f91

08002068 <__sfp>:
 8002068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800206a:	4607      	mov	r7, r0
 800206c:	f7ff ffac 	bl	8001fc8 <__sfp_lock_acquire>
 8002070:	4b1e      	ldr	r3, [pc, #120]	; (80020ec <__sfp+0x84>)
 8002072:	681e      	ldr	r6, [r3, #0]
 8002074:	69b3      	ldr	r3, [r6, #24]
 8002076:	b913      	cbnz	r3, 800207e <__sfp+0x16>
 8002078:	4630      	mov	r0, r6
 800207a:	f7ff ffbd 	bl	8001ff8 <__sinit>
 800207e:	3648      	adds	r6, #72	; 0x48
 8002080:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002084:	3b01      	subs	r3, #1
 8002086:	d503      	bpl.n	8002090 <__sfp+0x28>
 8002088:	6833      	ldr	r3, [r6, #0]
 800208a:	b30b      	cbz	r3, 80020d0 <__sfp+0x68>
 800208c:	6836      	ldr	r6, [r6, #0]
 800208e:	e7f7      	b.n	8002080 <__sfp+0x18>
 8002090:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002094:	b9d5      	cbnz	r5, 80020cc <__sfp+0x64>
 8002096:	4b16      	ldr	r3, [pc, #88]	; (80020f0 <__sfp+0x88>)
 8002098:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800209c:	60e3      	str	r3, [r4, #12]
 800209e:	6665      	str	r5, [r4, #100]	; 0x64
 80020a0:	f000 f847 	bl	8002132 <__retarget_lock_init_recursive>
 80020a4:	f7ff ff96 	bl	8001fd4 <__sfp_lock_release>
 80020a8:	2208      	movs	r2, #8
 80020aa:	4629      	mov	r1, r5
 80020ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80020b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80020b4:	6025      	str	r5, [r4, #0]
 80020b6:	61a5      	str	r5, [r4, #24]
 80020b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80020bc:	f7ff feee 	bl	8001e9c <memset>
 80020c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80020c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80020c8:	4620      	mov	r0, r4
 80020ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020cc:	3468      	adds	r4, #104	; 0x68
 80020ce:	e7d9      	b.n	8002084 <__sfp+0x1c>
 80020d0:	2104      	movs	r1, #4
 80020d2:	4638      	mov	r0, r7
 80020d4:	f7ff ff62 	bl	8001f9c <__sfmoreglue>
 80020d8:	4604      	mov	r4, r0
 80020da:	6030      	str	r0, [r6, #0]
 80020dc:	2800      	cmp	r0, #0
 80020de:	d1d5      	bne.n	800208c <__sfp+0x24>
 80020e0:	f7ff ff78 	bl	8001fd4 <__sfp_lock_release>
 80020e4:	230c      	movs	r3, #12
 80020e6:	603b      	str	r3, [r7, #0]
 80020e8:	e7ee      	b.n	80020c8 <__sfp+0x60>
 80020ea:	bf00      	nop
 80020ec:	080033a0 	.word	0x080033a0
 80020f0:	ffff0001 	.word	0xffff0001

080020f4 <_fwalk_reent>:
 80020f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80020f8:	4606      	mov	r6, r0
 80020fa:	4688      	mov	r8, r1
 80020fc:	2700      	movs	r7, #0
 80020fe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002102:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002106:	f1b9 0901 	subs.w	r9, r9, #1
 800210a:	d505      	bpl.n	8002118 <_fwalk_reent+0x24>
 800210c:	6824      	ldr	r4, [r4, #0]
 800210e:	2c00      	cmp	r4, #0
 8002110:	d1f7      	bne.n	8002102 <_fwalk_reent+0xe>
 8002112:	4638      	mov	r0, r7
 8002114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002118:	89ab      	ldrh	r3, [r5, #12]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d907      	bls.n	800212e <_fwalk_reent+0x3a>
 800211e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002122:	3301      	adds	r3, #1
 8002124:	d003      	beq.n	800212e <_fwalk_reent+0x3a>
 8002126:	4629      	mov	r1, r5
 8002128:	4630      	mov	r0, r6
 800212a:	47c0      	blx	r8
 800212c:	4307      	orrs	r7, r0
 800212e:	3568      	adds	r5, #104	; 0x68
 8002130:	e7e9      	b.n	8002106 <_fwalk_reent+0x12>

08002132 <__retarget_lock_init_recursive>:
 8002132:	4770      	bx	lr

08002134 <__retarget_lock_acquire_recursive>:
 8002134:	4770      	bx	lr

08002136 <__retarget_lock_release_recursive>:
 8002136:	4770      	bx	lr

08002138 <sbrk_aligned>:
 8002138:	b570      	push	{r4, r5, r6, lr}
 800213a:	4e0e      	ldr	r6, [pc, #56]	; (8002174 <sbrk_aligned+0x3c>)
 800213c:	460c      	mov	r4, r1
 800213e:	6831      	ldr	r1, [r6, #0]
 8002140:	4605      	mov	r5, r0
 8002142:	b911      	cbnz	r1, 800214a <sbrk_aligned+0x12>
 8002144:	f000 fcd6 	bl	8002af4 <_sbrk_r>
 8002148:	6030      	str	r0, [r6, #0]
 800214a:	4621      	mov	r1, r4
 800214c:	4628      	mov	r0, r5
 800214e:	f000 fcd1 	bl	8002af4 <_sbrk_r>
 8002152:	1c43      	adds	r3, r0, #1
 8002154:	d00a      	beq.n	800216c <sbrk_aligned+0x34>
 8002156:	1cc4      	adds	r4, r0, #3
 8002158:	f024 0403 	bic.w	r4, r4, #3
 800215c:	42a0      	cmp	r0, r4
 800215e:	d007      	beq.n	8002170 <sbrk_aligned+0x38>
 8002160:	1a21      	subs	r1, r4, r0
 8002162:	4628      	mov	r0, r5
 8002164:	f000 fcc6 	bl	8002af4 <_sbrk_r>
 8002168:	3001      	adds	r0, #1
 800216a:	d101      	bne.n	8002170 <sbrk_aligned+0x38>
 800216c:	f04f 34ff 	mov.w	r4, #4294967295
 8002170:	4620      	mov	r0, r4
 8002172:	bd70      	pop	{r4, r5, r6, pc}
 8002174:	200001ac 	.word	0x200001ac

08002178 <_malloc_r>:
 8002178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800217c:	1ccd      	adds	r5, r1, #3
 800217e:	f025 0503 	bic.w	r5, r5, #3
 8002182:	3508      	adds	r5, #8
 8002184:	2d0c      	cmp	r5, #12
 8002186:	bf38      	it	cc
 8002188:	250c      	movcc	r5, #12
 800218a:	2d00      	cmp	r5, #0
 800218c:	4607      	mov	r7, r0
 800218e:	db01      	blt.n	8002194 <_malloc_r+0x1c>
 8002190:	42a9      	cmp	r1, r5
 8002192:	d905      	bls.n	80021a0 <_malloc_r+0x28>
 8002194:	230c      	movs	r3, #12
 8002196:	2600      	movs	r6, #0
 8002198:	603b      	str	r3, [r7, #0]
 800219a:	4630      	mov	r0, r6
 800219c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021a0:	4e2e      	ldr	r6, [pc, #184]	; (800225c <_malloc_r+0xe4>)
 80021a2:	f000 ff49 	bl	8003038 <__malloc_lock>
 80021a6:	6833      	ldr	r3, [r6, #0]
 80021a8:	461c      	mov	r4, r3
 80021aa:	bb34      	cbnz	r4, 80021fa <_malloc_r+0x82>
 80021ac:	4629      	mov	r1, r5
 80021ae:	4638      	mov	r0, r7
 80021b0:	f7ff ffc2 	bl	8002138 <sbrk_aligned>
 80021b4:	1c43      	adds	r3, r0, #1
 80021b6:	4604      	mov	r4, r0
 80021b8:	d14d      	bne.n	8002256 <_malloc_r+0xde>
 80021ba:	6834      	ldr	r4, [r6, #0]
 80021bc:	4626      	mov	r6, r4
 80021be:	2e00      	cmp	r6, #0
 80021c0:	d140      	bne.n	8002244 <_malloc_r+0xcc>
 80021c2:	6823      	ldr	r3, [r4, #0]
 80021c4:	4631      	mov	r1, r6
 80021c6:	4638      	mov	r0, r7
 80021c8:	eb04 0803 	add.w	r8, r4, r3
 80021cc:	f000 fc92 	bl	8002af4 <_sbrk_r>
 80021d0:	4580      	cmp	r8, r0
 80021d2:	d13a      	bne.n	800224a <_malloc_r+0xd2>
 80021d4:	6821      	ldr	r1, [r4, #0]
 80021d6:	3503      	adds	r5, #3
 80021d8:	1a6d      	subs	r5, r5, r1
 80021da:	f025 0503 	bic.w	r5, r5, #3
 80021de:	3508      	adds	r5, #8
 80021e0:	2d0c      	cmp	r5, #12
 80021e2:	bf38      	it	cc
 80021e4:	250c      	movcc	r5, #12
 80021e6:	4638      	mov	r0, r7
 80021e8:	4629      	mov	r1, r5
 80021ea:	f7ff ffa5 	bl	8002138 <sbrk_aligned>
 80021ee:	3001      	adds	r0, #1
 80021f0:	d02b      	beq.n	800224a <_malloc_r+0xd2>
 80021f2:	6823      	ldr	r3, [r4, #0]
 80021f4:	442b      	add	r3, r5
 80021f6:	6023      	str	r3, [r4, #0]
 80021f8:	e00e      	b.n	8002218 <_malloc_r+0xa0>
 80021fa:	6822      	ldr	r2, [r4, #0]
 80021fc:	1b52      	subs	r2, r2, r5
 80021fe:	d41e      	bmi.n	800223e <_malloc_r+0xc6>
 8002200:	2a0b      	cmp	r2, #11
 8002202:	d916      	bls.n	8002232 <_malloc_r+0xba>
 8002204:	1961      	adds	r1, r4, r5
 8002206:	42a3      	cmp	r3, r4
 8002208:	6025      	str	r5, [r4, #0]
 800220a:	bf18      	it	ne
 800220c:	6059      	strne	r1, [r3, #4]
 800220e:	6863      	ldr	r3, [r4, #4]
 8002210:	bf08      	it	eq
 8002212:	6031      	streq	r1, [r6, #0]
 8002214:	5162      	str	r2, [r4, r5]
 8002216:	604b      	str	r3, [r1, #4]
 8002218:	4638      	mov	r0, r7
 800221a:	f104 060b 	add.w	r6, r4, #11
 800221e:	f000 ff11 	bl	8003044 <__malloc_unlock>
 8002222:	f026 0607 	bic.w	r6, r6, #7
 8002226:	1d23      	adds	r3, r4, #4
 8002228:	1af2      	subs	r2, r6, r3
 800222a:	d0b6      	beq.n	800219a <_malloc_r+0x22>
 800222c:	1b9b      	subs	r3, r3, r6
 800222e:	50a3      	str	r3, [r4, r2]
 8002230:	e7b3      	b.n	800219a <_malloc_r+0x22>
 8002232:	6862      	ldr	r2, [r4, #4]
 8002234:	42a3      	cmp	r3, r4
 8002236:	bf0c      	ite	eq
 8002238:	6032      	streq	r2, [r6, #0]
 800223a:	605a      	strne	r2, [r3, #4]
 800223c:	e7ec      	b.n	8002218 <_malloc_r+0xa0>
 800223e:	4623      	mov	r3, r4
 8002240:	6864      	ldr	r4, [r4, #4]
 8002242:	e7b2      	b.n	80021aa <_malloc_r+0x32>
 8002244:	4634      	mov	r4, r6
 8002246:	6876      	ldr	r6, [r6, #4]
 8002248:	e7b9      	b.n	80021be <_malloc_r+0x46>
 800224a:	230c      	movs	r3, #12
 800224c:	4638      	mov	r0, r7
 800224e:	603b      	str	r3, [r7, #0]
 8002250:	f000 fef8 	bl	8003044 <__malloc_unlock>
 8002254:	e7a1      	b.n	800219a <_malloc_r+0x22>
 8002256:	6025      	str	r5, [r4, #0]
 8002258:	e7de      	b.n	8002218 <_malloc_r+0xa0>
 800225a:	bf00      	nop
 800225c:	200001a8 	.word	0x200001a8

08002260 <__ssputs_r>:
 8002260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002264:	688e      	ldr	r6, [r1, #8]
 8002266:	4682      	mov	sl, r0
 8002268:	429e      	cmp	r6, r3
 800226a:	460c      	mov	r4, r1
 800226c:	4690      	mov	r8, r2
 800226e:	461f      	mov	r7, r3
 8002270:	d838      	bhi.n	80022e4 <__ssputs_r+0x84>
 8002272:	898a      	ldrh	r2, [r1, #12]
 8002274:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002278:	d032      	beq.n	80022e0 <__ssputs_r+0x80>
 800227a:	6825      	ldr	r5, [r4, #0]
 800227c:	6909      	ldr	r1, [r1, #16]
 800227e:	3301      	adds	r3, #1
 8002280:	eba5 0901 	sub.w	r9, r5, r1
 8002284:	6965      	ldr	r5, [r4, #20]
 8002286:	444b      	add	r3, r9
 8002288:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800228c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002290:	106d      	asrs	r5, r5, #1
 8002292:	429d      	cmp	r5, r3
 8002294:	bf38      	it	cc
 8002296:	461d      	movcc	r5, r3
 8002298:	0553      	lsls	r3, r2, #21
 800229a:	d531      	bpl.n	8002300 <__ssputs_r+0xa0>
 800229c:	4629      	mov	r1, r5
 800229e:	f7ff ff6b 	bl	8002178 <_malloc_r>
 80022a2:	4606      	mov	r6, r0
 80022a4:	b950      	cbnz	r0, 80022bc <__ssputs_r+0x5c>
 80022a6:	230c      	movs	r3, #12
 80022a8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ac:	f8ca 3000 	str.w	r3, [sl]
 80022b0:	89a3      	ldrh	r3, [r4, #12]
 80022b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022b6:	81a3      	strh	r3, [r4, #12]
 80022b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022bc:	464a      	mov	r2, r9
 80022be:	6921      	ldr	r1, [r4, #16]
 80022c0:	f000 fe92 	bl	8002fe8 <memcpy>
 80022c4:	89a3      	ldrh	r3, [r4, #12]
 80022c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80022ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ce:	81a3      	strh	r3, [r4, #12]
 80022d0:	6126      	str	r6, [r4, #16]
 80022d2:	444e      	add	r6, r9
 80022d4:	6026      	str	r6, [r4, #0]
 80022d6:	463e      	mov	r6, r7
 80022d8:	6165      	str	r5, [r4, #20]
 80022da:	eba5 0509 	sub.w	r5, r5, r9
 80022de:	60a5      	str	r5, [r4, #8]
 80022e0:	42be      	cmp	r6, r7
 80022e2:	d900      	bls.n	80022e6 <__ssputs_r+0x86>
 80022e4:	463e      	mov	r6, r7
 80022e6:	4632      	mov	r2, r6
 80022e8:	4641      	mov	r1, r8
 80022ea:	6820      	ldr	r0, [r4, #0]
 80022ec:	f000 fe8a 	bl	8003004 <memmove>
 80022f0:	68a3      	ldr	r3, [r4, #8]
 80022f2:	2000      	movs	r0, #0
 80022f4:	1b9b      	subs	r3, r3, r6
 80022f6:	60a3      	str	r3, [r4, #8]
 80022f8:	6823      	ldr	r3, [r4, #0]
 80022fa:	4433      	add	r3, r6
 80022fc:	6023      	str	r3, [r4, #0]
 80022fe:	e7db      	b.n	80022b8 <__ssputs_r+0x58>
 8002300:	462a      	mov	r2, r5
 8002302:	f000 feed 	bl	80030e0 <_realloc_r>
 8002306:	4606      	mov	r6, r0
 8002308:	2800      	cmp	r0, #0
 800230a:	d1e1      	bne.n	80022d0 <__ssputs_r+0x70>
 800230c:	4650      	mov	r0, sl
 800230e:	6921      	ldr	r1, [r4, #16]
 8002310:	f000 fe9e 	bl	8003050 <_free_r>
 8002314:	e7c7      	b.n	80022a6 <__ssputs_r+0x46>
	...

08002318 <_svfiprintf_r>:
 8002318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800231c:	4698      	mov	r8, r3
 800231e:	898b      	ldrh	r3, [r1, #12]
 8002320:	4607      	mov	r7, r0
 8002322:	061b      	lsls	r3, r3, #24
 8002324:	460d      	mov	r5, r1
 8002326:	4614      	mov	r4, r2
 8002328:	b09d      	sub	sp, #116	; 0x74
 800232a:	d50e      	bpl.n	800234a <_svfiprintf_r+0x32>
 800232c:	690b      	ldr	r3, [r1, #16]
 800232e:	b963      	cbnz	r3, 800234a <_svfiprintf_r+0x32>
 8002330:	2140      	movs	r1, #64	; 0x40
 8002332:	f7ff ff21 	bl	8002178 <_malloc_r>
 8002336:	6028      	str	r0, [r5, #0]
 8002338:	6128      	str	r0, [r5, #16]
 800233a:	b920      	cbnz	r0, 8002346 <_svfiprintf_r+0x2e>
 800233c:	230c      	movs	r3, #12
 800233e:	603b      	str	r3, [r7, #0]
 8002340:	f04f 30ff 	mov.w	r0, #4294967295
 8002344:	e0d1      	b.n	80024ea <_svfiprintf_r+0x1d2>
 8002346:	2340      	movs	r3, #64	; 0x40
 8002348:	616b      	str	r3, [r5, #20]
 800234a:	2300      	movs	r3, #0
 800234c:	9309      	str	r3, [sp, #36]	; 0x24
 800234e:	2320      	movs	r3, #32
 8002350:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002354:	2330      	movs	r3, #48	; 0x30
 8002356:	f04f 0901 	mov.w	r9, #1
 800235a:	f8cd 800c 	str.w	r8, [sp, #12]
 800235e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002504 <_svfiprintf_r+0x1ec>
 8002362:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002366:	4623      	mov	r3, r4
 8002368:	469a      	mov	sl, r3
 800236a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800236e:	b10a      	cbz	r2, 8002374 <_svfiprintf_r+0x5c>
 8002370:	2a25      	cmp	r2, #37	; 0x25
 8002372:	d1f9      	bne.n	8002368 <_svfiprintf_r+0x50>
 8002374:	ebba 0b04 	subs.w	fp, sl, r4
 8002378:	d00b      	beq.n	8002392 <_svfiprintf_r+0x7a>
 800237a:	465b      	mov	r3, fp
 800237c:	4622      	mov	r2, r4
 800237e:	4629      	mov	r1, r5
 8002380:	4638      	mov	r0, r7
 8002382:	f7ff ff6d 	bl	8002260 <__ssputs_r>
 8002386:	3001      	adds	r0, #1
 8002388:	f000 80aa 	beq.w	80024e0 <_svfiprintf_r+0x1c8>
 800238c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800238e:	445a      	add	r2, fp
 8002390:	9209      	str	r2, [sp, #36]	; 0x24
 8002392:	f89a 3000 	ldrb.w	r3, [sl]
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 80a2 	beq.w	80024e0 <_svfiprintf_r+0x1c8>
 800239c:	2300      	movs	r3, #0
 800239e:	f04f 32ff 	mov.w	r2, #4294967295
 80023a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80023a6:	f10a 0a01 	add.w	sl, sl, #1
 80023aa:	9304      	str	r3, [sp, #16]
 80023ac:	9307      	str	r3, [sp, #28]
 80023ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80023b2:	931a      	str	r3, [sp, #104]	; 0x68
 80023b4:	4654      	mov	r4, sl
 80023b6:	2205      	movs	r2, #5
 80023b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023bc:	4851      	ldr	r0, [pc, #324]	; (8002504 <_svfiprintf_r+0x1ec>)
 80023be:	f000 fe05 	bl	8002fcc <memchr>
 80023c2:	9a04      	ldr	r2, [sp, #16]
 80023c4:	b9d8      	cbnz	r0, 80023fe <_svfiprintf_r+0xe6>
 80023c6:	06d0      	lsls	r0, r2, #27
 80023c8:	bf44      	itt	mi
 80023ca:	2320      	movmi	r3, #32
 80023cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80023d0:	0711      	lsls	r1, r2, #28
 80023d2:	bf44      	itt	mi
 80023d4:	232b      	movmi	r3, #43	; 0x2b
 80023d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80023da:	f89a 3000 	ldrb.w	r3, [sl]
 80023de:	2b2a      	cmp	r3, #42	; 0x2a
 80023e0:	d015      	beq.n	800240e <_svfiprintf_r+0xf6>
 80023e2:	4654      	mov	r4, sl
 80023e4:	2000      	movs	r0, #0
 80023e6:	f04f 0c0a 	mov.w	ip, #10
 80023ea:	9a07      	ldr	r2, [sp, #28]
 80023ec:	4621      	mov	r1, r4
 80023ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80023f2:	3b30      	subs	r3, #48	; 0x30
 80023f4:	2b09      	cmp	r3, #9
 80023f6:	d94e      	bls.n	8002496 <_svfiprintf_r+0x17e>
 80023f8:	b1b0      	cbz	r0, 8002428 <_svfiprintf_r+0x110>
 80023fa:	9207      	str	r2, [sp, #28]
 80023fc:	e014      	b.n	8002428 <_svfiprintf_r+0x110>
 80023fe:	eba0 0308 	sub.w	r3, r0, r8
 8002402:	fa09 f303 	lsl.w	r3, r9, r3
 8002406:	4313      	orrs	r3, r2
 8002408:	46a2      	mov	sl, r4
 800240a:	9304      	str	r3, [sp, #16]
 800240c:	e7d2      	b.n	80023b4 <_svfiprintf_r+0x9c>
 800240e:	9b03      	ldr	r3, [sp, #12]
 8002410:	1d19      	adds	r1, r3, #4
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	9103      	str	r1, [sp, #12]
 8002416:	2b00      	cmp	r3, #0
 8002418:	bfbb      	ittet	lt
 800241a:	425b      	neglt	r3, r3
 800241c:	f042 0202 	orrlt.w	r2, r2, #2
 8002420:	9307      	strge	r3, [sp, #28]
 8002422:	9307      	strlt	r3, [sp, #28]
 8002424:	bfb8      	it	lt
 8002426:	9204      	strlt	r2, [sp, #16]
 8002428:	7823      	ldrb	r3, [r4, #0]
 800242a:	2b2e      	cmp	r3, #46	; 0x2e
 800242c:	d10c      	bne.n	8002448 <_svfiprintf_r+0x130>
 800242e:	7863      	ldrb	r3, [r4, #1]
 8002430:	2b2a      	cmp	r3, #42	; 0x2a
 8002432:	d135      	bne.n	80024a0 <_svfiprintf_r+0x188>
 8002434:	9b03      	ldr	r3, [sp, #12]
 8002436:	3402      	adds	r4, #2
 8002438:	1d1a      	adds	r2, r3, #4
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	9203      	str	r2, [sp, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	bfb8      	it	lt
 8002442:	f04f 33ff 	movlt.w	r3, #4294967295
 8002446:	9305      	str	r3, [sp, #20]
 8002448:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002508 <_svfiprintf_r+0x1f0>
 800244c:	2203      	movs	r2, #3
 800244e:	4650      	mov	r0, sl
 8002450:	7821      	ldrb	r1, [r4, #0]
 8002452:	f000 fdbb 	bl	8002fcc <memchr>
 8002456:	b140      	cbz	r0, 800246a <_svfiprintf_r+0x152>
 8002458:	2340      	movs	r3, #64	; 0x40
 800245a:	eba0 000a 	sub.w	r0, r0, sl
 800245e:	fa03 f000 	lsl.w	r0, r3, r0
 8002462:	9b04      	ldr	r3, [sp, #16]
 8002464:	3401      	adds	r4, #1
 8002466:	4303      	orrs	r3, r0
 8002468:	9304      	str	r3, [sp, #16]
 800246a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800246e:	2206      	movs	r2, #6
 8002470:	4826      	ldr	r0, [pc, #152]	; (800250c <_svfiprintf_r+0x1f4>)
 8002472:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002476:	f000 fda9 	bl	8002fcc <memchr>
 800247a:	2800      	cmp	r0, #0
 800247c:	d038      	beq.n	80024f0 <_svfiprintf_r+0x1d8>
 800247e:	4b24      	ldr	r3, [pc, #144]	; (8002510 <_svfiprintf_r+0x1f8>)
 8002480:	bb1b      	cbnz	r3, 80024ca <_svfiprintf_r+0x1b2>
 8002482:	9b03      	ldr	r3, [sp, #12]
 8002484:	3307      	adds	r3, #7
 8002486:	f023 0307 	bic.w	r3, r3, #7
 800248a:	3308      	adds	r3, #8
 800248c:	9303      	str	r3, [sp, #12]
 800248e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002490:	4433      	add	r3, r6
 8002492:	9309      	str	r3, [sp, #36]	; 0x24
 8002494:	e767      	b.n	8002366 <_svfiprintf_r+0x4e>
 8002496:	460c      	mov	r4, r1
 8002498:	2001      	movs	r0, #1
 800249a:	fb0c 3202 	mla	r2, ip, r2, r3
 800249e:	e7a5      	b.n	80023ec <_svfiprintf_r+0xd4>
 80024a0:	2300      	movs	r3, #0
 80024a2:	f04f 0c0a 	mov.w	ip, #10
 80024a6:	4619      	mov	r1, r3
 80024a8:	3401      	adds	r4, #1
 80024aa:	9305      	str	r3, [sp, #20]
 80024ac:	4620      	mov	r0, r4
 80024ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80024b2:	3a30      	subs	r2, #48	; 0x30
 80024b4:	2a09      	cmp	r2, #9
 80024b6:	d903      	bls.n	80024c0 <_svfiprintf_r+0x1a8>
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0c5      	beq.n	8002448 <_svfiprintf_r+0x130>
 80024bc:	9105      	str	r1, [sp, #20]
 80024be:	e7c3      	b.n	8002448 <_svfiprintf_r+0x130>
 80024c0:	4604      	mov	r4, r0
 80024c2:	2301      	movs	r3, #1
 80024c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80024c8:	e7f0      	b.n	80024ac <_svfiprintf_r+0x194>
 80024ca:	ab03      	add	r3, sp, #12
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	462a      	mov	r2, r5
 80024d0:	4638      	mov	r0, r7
 80024d2:	4b10      	ldr	r3, [pc, #64]	; (8002514 <_svfiprintf_r+0x1fc>)
 80024d4:	a904      	add	r1, sp, #16
 80024d6:	f3af 8000 	nop.w
 80024da:	1c42      	adds	r2, r0, #1
 80024dc:	4606      	mov	r6, r0
 80024de:	d1d6      	bne.n	800248e <_svfiprintf_r+0x176>
 80024e0:	89ab      	ldrh	r3, [r5, #12]
 80024e2:	065b      	lsls	r3, r3, #25
 80024e4:	f53f af2c 	bmi.w	8002340 <_svfiprintf_r+0x28>
 80024e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80024ea:	b01d      	add	sp, #116	; 0x74
 80024ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024f0:	ab03      	add	r3, sp, #12
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	462a      	mov	r2, r5
 80024f6:	4638      	mov	r0, r7
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <_svfiprintf_r+0x1fc>)
 80024fa:	a904      	add	r1, sp, #16
 80024fc:	f000 f9d4 	bl	80028a8 <_printf_i>
 8002500:	e7eb      	b.n	80024da <_svfiprintf_r+0x1c2>
 8002502:	bf00      	nop
 8002504:	08003404 	.word	0x08003404
 8002508:	0800340a 	.word	0x0800340a
 800250c:	0800340e 	.word	0x0800340e
 8002510:	00000000 	.word	0x00000000
 8002514:	08002261 	.word	0x08002261

08002518 <__sfputc_r>:
 8002518:	6893      	ldr	r3, [r2, #8]
 800251a:	b410      	push	{r4}
 800251c:	3b01      	subs	r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	6093      	str	r3, [r2, #8]
 8002522:	da07      	bge.n	8002534 <__sfputc_r+0x1c>
 8002524:	6994      	ldr	r4, [r2, #24]
 8002526:	42a3      	cmp	r3, r4
 8002528:	db01      	blt.n	800252e <__sfputc_r+0x16>
 800252a:	290a      	cmp	r1, #10
 800252c:	d102      	bne.n	8002534 <__sfputc_r+0x1c>
 800252e:	bc10      	pop	{r4}
 8002530:	f000 bb34 	b.w	8002b9c <__swbuf_r>
 8002534:	6813      	ldr	r3, [r2, #0]
 8002536:	1c58      	adds	r0, r3, #1
 8002538:	6010      	str	r0, [r2, #0]
 800253a:	7019      	strb	r1, [r3, #0]
 800253c:	4608      	mov	r0, r1
 800253e:	bc10      	pop	{r4}
 8002540:	4770      	bx	lr

08002542 <__sfputs_r>:
 8002542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002544:	4606      	mov	r6, r0
 8002546:	460f      	mov	r7, r1
 8002548:	4614      	mov	r4, r2
 800254a:	18d5      	adds	r5, r2, r3
 800254c:	42ac      	cmp	r4, r5
 800254e:	d101      	bne.n	8002554 <__sfputs_r+0x12>
 8002550:	2000      	movs	r0, #0
 8002552:	e007      	b.n	8002564 <__sfputs_r+0x22>
 8002554:	463a      	mov	r2, r7
 8002556:	4630      	mov	r0, r6
 8002558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800255c:	f7ff ffdc 	bl	8002518 <__sfputc_r>
 8002560:	1c43      	adds	r3, r0, #1
 8002562:	d1f3      	bne.n	800254c <__sfputs_r+0xa>
 8002564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002568 <_vfiprintf_r>:
 8002568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800256c:	460d      	mov	r5, r1
 800256e:	4614      	mov	r4, r2
 8002570:	4698      	mov	r8, r3
 8002572:	4606      	mov	r6, r0
 8002574:	b09d      	sub	sp, #116	; 0x74
 8002576:	b118      	cbz	r0, 8002580 <_vfiprintf_r+0x18>
 8002578:	6983      	ldr	r3, [r0, #24]
 800257a:	b90b      	cbnz	r3, 8002580 <_vfiprintf_r+0x18>
 800257c:	f7ff fd3c 	bl	8001ff8 <__sinit>
 8002580:	4b89      	ldr	r3, [pc, #548]	; (80027a8 <_vfiprintf_r+0x240>)
 8002582:	429d      	cmp	r5, r3
 8002584:	d11b      	bne.n	80025be <_vfiprintf_r+0x56>
 8002586:	6875      	ldr	r5, [r6, #4]
 8002588:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800258a:	07d9      	lsls	r1, r3, #31
 800258c:	d405      	bmi.n	800259a <_vfiprintf_r+0x32>
 800258e:	89ab      	ldrh	r3, [r5, #12]
 8002590:	059a      	lsls	r2, r3, #22
 8002592:	d402      	bmi.n	800259a <_vfiprintf_r+0x32>
 8002594:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002596:	f7ff fdcd 	bl	8002134 <__retarget_lock_acquire_recursive>
 800259a:	89ab      	ldrh	r3, [r5, #12]
 800259c:	071b      	lsls	r3, r3, #28
 800259e:	d501      	bpl.n	80025a4 <_vfiprintf_r+0x3c>
 80025a0:	692b      	ldr	r3, [r5, #16]
 80025a2:	b9eb      	cbnz	r3, 80025e0 <_vfiprintf_r+0x78>
 80025a4:	4629      	mov	r1, r5
 80025a6:	4630      	mov	r0, r6
 80025a8:	f000 fb5c 	bl	8002c64 <__swsetup_r>
 80025ac:	b1c0      	cbz	r0, 80025e0 <_vfiprintf_r+0x78>
 80025ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80025b0:	07dc      	lsls	r4, r3, #31
 80025b2:	d50e      	bpl.n	80025d2 <_vfiprintf_r+0x6a>
 80025b4:	f04f 30ff 	mov.w	r0, #4294967295
 80025b8:	b01d      	add	sp, #116	; 0x74
 80025ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025be:	4b7b      	ldr	r3, [pc, #492]	; (80027ac <_vfiprintf_r+0x244>)
 80025c0:	429d      	cmp	r5, r3
 80025c2:	d101      	bne.n	80025c8 <_vfiprintf_r+0x60>
 80025c4:	68b5      	ldr	r5, [r6, #8]
 80025c6:	e7df      	b.n	8002588 <_vfiprintf_r+0x20>
 80025c8:	4b79      	ldr	r3, [pc, #484]	; (80027b0 <_vfiprintf_r+0x248>)
 80025ca:	429d      	cmp	r5, r3
 80025cc:	bf08      	it	eq
 80025ce:	68f5      	ldreq	r5, [r6, #12]
 80025d0:	e7da      	b.n	8002588 <_vfiprintf_r+0x20>
 80025d2:	89ab      	ldrh	r3, [r5, #12]
 80025d4:	0598      	lsls	r0, r3, #22
 80025d6:	d4ed      	bmi.n	80025b4 <_vfiprintf_r+0x4c>
 80025d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80025da:	f7ff fdac 	bl	8002136 <__retarget_lock_release_recursive>
 80025de:	e7e9      	b.n	80025b4 <_vfiprintf_r+0x4c>
 80025e0:	2300      	movs	r3, #0
 80025e2:	9309      	str	r3, [sp, #36]	; 0x24
 80025e4:	2320      	movs	r3, #32
 80025e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80025ea:	2330      	movs	r3, #48	; 0x30
 80025ec:	f04f 0901 	mov.w	r9, #1
 80025f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80025f4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80027b4 <_vfiprintf_r+0x24c>
 80025f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80025fc:	4623      	mov	r3, r4
 80025fe:	469a      	mov	sl, r3
 8002600:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002604:	b10a      	cbz	r2, 800260a <_vfiprintf_r+0xa2>
 8002606:	2a25      	cmp	r2, #37	; 0x25
 8002608:	d1f9      	bne.n	80025fe <_vfiprintf_r+0x96>
 800260a:	ebba 0b04 	subs.w	fp, sl, r4
 800260e:	d00b      	beq.n	8002628 <_vfiprintf_r+0xc0>
 8002610:	465b      	mov	r3, fp
 8002612:	4622      	mov	r2, r4
 8002614:	4629      	mov	r1, r5
 8002616:	4630      	mov	r0, r6
 8002618:	f7ff ff93 	bl	8002542 <__sfputs_r>
 800261c:	3001      	adds	r0, #1
 800261e:	f000 80aa 	beq.w	8002776 <_vfiprintf_r+0x20e>
 8002622:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002624:	445a      	add	r2, fp
 8002626:	9209      	str	r2, [sp, #36]	; 0x24
 8002628:	f89a 3000 	ldrb.w	r3, [sl]
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 80a2 	beq.w	8002776 <_vfiprintf_r+0x20e>
 8002632:	2300      	movs	r3, #0
 8002634:	f04f 32ff 	mov.w	r2, #4294967295
 8002638:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800263c:	f10a 0a01 	add.w	sl, sl, #1
 8002640:	9304      	str	r3, [sp, #16]
 8002642:	9307      	str	r3, [sp, #28]
 8002644:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002648:	931a      	str	r3, [sp, #104]	; 0x68
 800264a:	4654      	mov	r4, sl
 800264c:	2205      	movs	r2, #5
 800264e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002652:	4858      	ldr	r0, [pc, #352]	; (80027b4 <_vfiprintf_r+0x24c>)
 8002654:	f000 fcba 	bl	8002fcc <memchr>
 8002658:	9a04      	ldr	r2, [sp, #16]
 800265a:	b9d8      	cbnz	r0, 8002694 <_vfiprintf_r+0x12c>
 800265c:	06d1      	lsls	r1, r2, #27
 800265e:	bf44      	itt	mi
 8002660:	2320      	movmi	r3, #32
 8002662:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002666:	0713      	lsls	r3, r2, #28
 8002668:	bf44      	itt	mi
 800266a:	232b      	movmi	r3, #43	; 0x2b
 800266c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002670:	f89a 3000 	ldrb.w	r3, [sl]
 8002674:	2b2a      	cmp	r3, #42	; 0x2a
 8002676:	d015      	beq.n	80026a4 <_vfiprintf_r+0x13c>
 8002678:	4654      	mov	r4, sl
 800267a:	2000      	movs	r0, #0
 800267c:	f04f 0c0a 	mov.w	ip, #10
 8002680:	9a07      	ldr	r2, [sp, #28]
 8002682:	4621      	mov	r1, r4
 8002684:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002688:	3b30      	subs	r3, #48	; 0x30
 800268a:	2b09      	cmp	r3, #9
 800268c:	d94e      	bls.n	800272c <_vfiprintf_r+0x1c4>
 800268e:	b1b0      	cbz	r0, 80026be <_vfiprintf_r+0x156>
 8002690:	9207      	str	r2, [sp, #28]
 8002692:	e014      	b.n	80026be <_vfiprintf_r+0x156>
 8002694:	eba0 0308 	sub.w	r3, r0, r8
 8002698:	fa09 f303 	lsl.w	r3, r9, r3
 800269c:	4313      	orrs	r3, r2
 800269e:	46a2      	mov	sl, r4
 80026a0:	9304      	str	r3, [sp, #16]
 80026a2:	e7d2      	b.n	800264a <_vfiprintf_r+0xe2>
 80026a4:	9b03      	ldr	r3, [sp, #12]
 80026a6:	1d19      	adds	r1, r3, #4
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	9103      	str	r1, [sp, #12]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	bfbb      	ittet	lt
 80026b0:	425b      	neglt	r3, r3
 80026b2:	f042 0202 	orrlt.w	r2, r2, #2
 80026b6:	9307      	strge	r3, [sp, #28]
 80026b8:	9307      	strlt	r3, [sp, #28]
 80026ba:	bfb8      	it	lt
 80026bc:	9204      	strlt	r2, [sp, #16]
 80026be:	7823      	ldrb	r3, [r4, #0]
 80026c0:	2b2e      	cmp	r3, #46	; 0x2e
 80026c2:	d10c      	bne.n	80026de <_vfiprintf_r+0x176>
 80026c4:	7863      	ldrb	r3, [r4, #1]
 80026c6:	2b2a      	cmp	r3, #42	; 0x2a
 80026c8:	d135      	bne.n	8002736 <_vfiprintf_r+0x1ce>
 80026ca:	9b03      	ldr	r3, [sp, #12]
 80026cc:	3402      	adds	r4, #2
 80026ce:	1d1a      	adds	r2, r3, #4
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	9203      	str	r2, [sp, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	bfb8      	it	lt
 80026d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80026dc:	9305      	str	r3, [sp, #20]
 80026de:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80027b8 <_vfiprintf_r+0x250>
 80026e2:	2203      	movs	r2, #3
 80026e4:	4650      	mov	r0, sl
 80026e6:	7821      	ldrb	r1, [r4, #0]
 80026e8:	f000 fc70 	bl	8002fcc <memchr>
 80026ec:	b140      	cbz	r0, 8002700 <_vfiprintf_r+0x198>
 80026ee:	2340      	movs	r3, #64	; 0x40
 80026f0:	eba0 000a 	sub.w	r0, r0, sl
 80026f4:	fa03 f000 	lsl.w	r0, r3, r0
 80026f8:	9b04      	ldr	r3, [sp, #16]
 80026fa:	3401      	adds	r4, #1
 80026fc:	4303      	orrs	r3, r0
 80026fe:	9304      	str	r3, [sp, #16]
 8002700:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002704:	2206      	movs	r2, #6
 8002706:	482d      	ldr	r0, [pc, #180]	; (80027bc <_vfiprintf_r+0x254>)
 8002708:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800270c:	f000 fc5e 	bl	8002fcc <memchr>
 8002710:	2800      	cmp	r0, #0
 8002712:	d03f      	beq.n	8002794 <_vfiprintf_r+0x22c>
 8002714:	4b2a      	ldr	r3, [pc, #168]	; (80027c0 <_vfiprintf_r+0x258>)
 8002716:	bb1b      	cbnz	r3, 8002760 <_vfiprintf_r+0x1f8>
 8002718:	9b03      	ldr	r3, [sp, #12]
 800271a:	3307      	adds	r3, #7
 800271c:	f023 0307 	bic.w	r3, r3, #7
 8002720:	3308      	adds	r3, #8
 8002722:	9303      	str	r3, [sp, #12]
 8002724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002726:	443b      	add	r3, r7
 8002728:	9309      	str	r3, [sp, #36]	; 0x24
 800272a:	e767      	b.n	80025fc <_vfiprintf_r+0x94>
 800272c:	460c      	mov	r4, r1
 800272e:	2001      	movs	r0, #1
 8002730:	fb0c 3202 	mla	r2, ip, r2, r3
 8002734:	e7a5      	b.n	8002682 <_vfiprintf_r+0x11a>
 8002736:	2300      	movs	r3, #0
 8002738:	f04f 0c0a 	mov.w	ip, #10
 800273c:	4619      	mov	r1, r3
 800273e:	3401      	adds	r4, #1
 8002740:	9305      	str	r3, [sp, #20]
 8002742:	4620      	mov	r0, r4
 8002744:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002748:	3a30      	subs	r2, #48	; 0x30
 800274a:	2a09      	cmp	r2, #9
 800274c:	d903      	bls.n	8002756 <_vfiprintf_r+0x1ee>
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0c5      	beq.n	80026de <_vfiprintf_r+0x176>
 8002752:	9105      	str	r1, [sp, #20]
 8002754:	e7c3      	b.n	80026de <_vfiprintf_r+0x176>
 8002756:	4604      	mov	r4, r0
 8002758:	2301      	movs	r3, #1
 800275a:	fb0c 2101 	mla	r1, ip, r1, r2
 800275e:	e7f0      	b.n	8002742 <_vfiprintf_r+0x1da>
 8002760:	ab03      	add	r3, sp, #12
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	462a      	mov	r2, r5
 8002766:	4630      	mov	r0, r6
 8002768:	4b16      	ldr	r3, [pc, #88]	; (80027c4 <_vfiprintf_r+0x25c>)
 800276a:	a904      	add	r1, sp, #16
 800276c:	f3af 8000 	nop.w
 8002770:	4607      	mov	r7, r0
 8002772:	1c78      	adds	r0, r7, #1
 8002774:	d1d6      	bne.n	8002724 <_vfiprintf_r+0x1bc>
 8002776:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002778:	07d9      	lsls	r1, r3, #31
 800277a:	d405      	bmi.n	8002788 <_vfiprintf_r+0x220>
 800277c:	89ab      	ldrh	r3, [r5, #12]
 800277e:	059a      	lsls	r2, r3, #22
 8002780:	d402      	bmi.n	8002788 <_vfiprintf_r+0x220>
 8002782:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002784:	f7ff fcd7 	bl	8002136 <__retarget_lock_release_recursive>
 8002788:	89ab      	ldrh	r3, [r5, #12]
 800278a:	065b      	lsls	r3, r3, #25
 800278c:	f53f af12 	bmi.w	80025b4 <_vfiprintf_r+0x4c>
 8002790:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002792:	e711      	b.n	80025b8 <_vfiprintf_r+0x50>
 8002794:	ab03      	add	r3, sp, #12
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	462a      	mov	r2, r5
 800279a:	4630      	mov	r0, r6
 800279c:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <_vfiprintf_r+0x25c>)
 800279e:	a904      	add	r1, sp, #16
 80027a0:	f000 f882 	bl	80028a8 <_printf_i>
 80027a4:	e7e4      	b.n	8002770 <_vfiprintf_r+0x208>
 80027a6:	bf00      	nop
 80027a8:	080033c4 	.word	0x080033c4
 80027ac:	080033e4 	.word	0x080033e4
 80027b0:	080033a4 	.word	0x080033a4
 80027b4:	08003404 	.word	0x08003404
 80027b8:	0800340a 	.word	0x0800340a
 80027bc:	0800340e 	.word	0x0800340e
 80027c0:	00000000 	.word	0x00000000
 80027c4:	08002543 	.word	0x08002543

080027c8 <_printf_common>:
 80027c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027cc:	4616      	mov	r6, r2
 80027ce:	4699      	mov	r9, r3
 80027d0:	688a      	ldr	r2, [r1, #8]
 80027d2:	690b      	ldr	r3, [r1, #16]
 80027d4:	4607      	mov	r7, r0
 80027d6:	4293      	cmp	r3, r2
 80027d8:	bfb8      	it	lt
 80027da:	4613      	movlt	r3, r2
 80027dc:	6033      	str	r3, [r6, #0]
 80027de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80027e2:	460c      	mov	r4, r1
 80027e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80027e8:	b10a      	cbz	r2, 80027ee <_printf_common+0x26>
 80027ea:	3301      	adds	r3, #1
 80027ec:	6033      	str	r3, [r6, #0]
 80027ee:	6823      	ldr	r3, [r4, #0]
 80027f0:	0699      	lsls	r1, r3, #26
 80027f2:	bf42      	ittt	mi
 80027f4:	6833      	ldrmi	r3, [r6, #0]
 80027f6:	3302      	addmi	r3, #2
 80027f8:	6033      	strmi	r3, [r6, #0]
 80027fa:	6825      	ldr	r5, [r4, #0]
 80027fc:	f015 0506 	ands.w	r5, r5, #6
 8002800:	d106      	bne.n	8002810 <_printf_common+0x48>
 8002802:	f104 0a19 	add.w	sl, r4, #25
 8002806:	68e3      	ldr	r3, [r4, #12]
 8002808:	6832      	ldr	r2, [r6, #0]
 800280a:	1a9b      	subs	r3, r3, r2
 800280c:	42ab      	cmp	r3, r5
 800280e:	dc28      	bgt.n	8002862 <_printf_common+0x9a>
 8002810:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002814:	1e13      	subs	r3, r2, #0
 8002816:	6822      	ldr	r2, [r4, #0]
 8002818:	bf18      	it	ne
 800281a:	2301      	movne	r3, #1
 800281c:	0692      	lsls	r2, r2, #26
 800281e:	d42d      	bmi.n	800287c <_printf_common+0xb4>
 8002820:	4649      	mov	r1, r9
 8002822:	4638      	mov	r0, r7
 8002824:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002828:	47c0      	blx	r8
 800282a:	3001      	adds	r0, #1
 800282c:	d020      	beq.n	8002870 <_printf_common+0xa8>
 800282e:	6823      	ldr	r3, [r4, #0]
 8002830:	68e5      	ldr	r5, [r4, #12]
 8002832:	f003 0306 	and.w	r3, r3, #6
 8002836:	2b04      	cmp	r3, #4
 8002838:	bf18      	it	ne
 800283a:	2500      	movne	r5, #0
 800283c:	6832      	ldr	r2, [r6, #0]
 800283e:	f04f 0600 	mov.w	r6, #0
 8002842:	68a3      	ldr	r3, [r4, #8]
 8002844:	bf08      	it	eq
 8002846:	1aad      	subeq	r5, r5, r2
 8002848:	6922      	ldr	r2, [r4, #16]
 800284a:	bf08      	it	eq
 800284c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002850:	4293      	cmp	r3, r2
 8002852:	bfc4      	itt	gt
 8002854:	1a9b      	subgt	r3, r3, r2
 8002856:	18ed      	addgt	r5, r5, r3
 8002858:	341a      	adds	r4, #26
 800285a:	42b5      	cmp	r5, r6
 800285c:	d11a      	bne.n	8002894 <_printf_common+0xcc>
 800285e:	2000      	movs	r0, #0
 8002860:	e008      	b.n	8002874 <_printf_common+0xac>
 8002862:	2301      	movs	r3, #1
 8002864:	4652      	mov	r2, sl
 8002866:	4649      	mov	r1, r9
 8002868:	4638      	mov	r0, r7
 800286a:	47c0      	blx	r8
 800286c:	3001      	adds	r0, #1
 800286e:	d103      	bne.n	8002878 <_printf_common+0xb0>
 8002870:	f04f 30ff 	mov.w	r0, #4294967295
 8002874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002878:	3501      	adds	r5, #1
 800287a:	e7c4      	b.n	8002806 <_printf_common+0x3e>
 800287c:	2030      	movs	r0, #48	; 0x30
 800287e:	18e1      	adds	r1, r4, r3
 8002880:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800288a:	4422      	add	r2, r4
 800288c:	3302      	adds	r3, #2
 800288e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002892:	e7c5      	b.n	8002820 <_printf_common+0x58>
 8002894:	2301      	movs	r3, #1
 8002896:	4622      	mov	r2, r4
 8002898:	4649      	mov	r1, r9
 800289a:	4638      	mov	r0, r7
 800289c:	47c0      	blx	r8
 800289e:	3001      	adds	r0, #1
 80028a0:	d0e6      	beq.n	8002870 <_printf_common+0xa8>
 80028a2:	3601      	adds	r6, #1
 80028a4:	e7d9      	b.n	800285a <_printf_common+0x92>
	...

080028a8 <_printf_i>:
 80028a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80028ac:	7e0f      	ldrb	r7, [r1, #24]
 80028ae:	4691      	mov	r9, r2
 80028b0:	2f78      	cmp	r7, #120	; 0x78
 80028b2:	4680      	mov	r8, r0
 80028b4:	460c      	mov	r4, r1
 80028b6:	469a      	mov	sl, r3
 80028b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80028ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80028be:	d807      	bhi.n	80028d0 <_printf_i+0x28>
 80028c0:	2f62      	cmp	r7, #98	; 0x62
 80028c2:	d80a      	bhi.n	80028da <_printf_i+0x32>
 80028c4:	2f00      	cmp	r7, #0
 80028c6:	f000 80d9 	beq.w	8002a7c <_printf_i+0x1d4>
 80028ca:	2f58      	cmp	r7, #88	; 0x58
 80028cc:	f000 80a4 	beq.w	8002a18 <_printf_i+0x170>
 80028d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80028d8:	e03a      	b.n	8002950 <_printf_i+0xa8>
 80028da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80028de:	2b15      	cmp	r3, #21
 80028e0:	d8f6      	bhi.n	80028d0 <_printf_i+0x28>
 80028e2:	a101      	add	r1, pc, #4	; (adr r1, 80028e8 <_printf_i+0x40>)
 80028e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80028e8:	08002941 	.word	0x08002941
 80028ec:	08002955 	.word	0x08002955
 80028f0:	080028d1 	.word	0x080028d1
 80028f4:	080028d1 	.word	0x080028d1
 80028f8:	080028d1 	.word	0x080028d1
 80028fc:	080028d1 	.word	0x080028d1
 8002900:	08002955 	.word	0x08002955
 8002904:	080028d1 	.word	0x080028d1
 8002908:	080028d1 	.word	0x080028d1
 800290c:	080028d1 	.word	0x080028d1
 8002910:	080028d1 	.word	0x080028d1
 8002914:	08002a63 	.word	0x08002a63
 8002918:	08002985 	.word	0x08002985
 800291c:	08002a45 	.word	0x08002a45
 8002920:	080028d1 	.word	0x080028d1
 8002924:	080028d1 	.word	0x080028d1
 8002928:	08002a85 	.word	0x08002a85
 800292c:	080028d1 	.word	0x080028d1
 8002930:	08002985 	.word	0x08002985
 8002934:	080028d1 	.word	0x080028d1
 8002938:	080028d1 	.word	0x080028d1
 800293c:	08002a4d 	.word	0x08002a4d
 8002940:	682b      	ldr	r3, [r5, #0]
 8002942:	1d1a      	adds	r2, r3, #4
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	602a      	str	r2, [r5, #0]
 8002948:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800294c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002950:	2301      	movs	r3, #1
 8002952:	e0a4      	b.n	8002a9e <_printf_i+0x1f6>
 8002954:	6820      	ldr	r0, [r4, #0]
 8002956:	6829      	ldr	r1, [r5, #0]
 8002958:	0606      	lsls	r6, r0, #24
 800295a:	f101 0304 	add.w	r3, r1, #4
 800295e:	d50a      	bpl.n	8002976 <_printf_i+0xce>
 8002960:	680e      	ldr	r6, [r1, #0]
 8002962:	602b      	str	r3, [r5, #0]
 8002964:	2e00      	cmp	r6, #0
 8002966:	da03      	bge.n	8002970 <_printf_i+0xc8>
 8002968:	232d      	movs	r3, #45	; 0x2d
 800296a:	4276      	negs	r6, r6
 800296c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002970:	230a      	movs	r3, #10
 8002972:	485e      	ldr	r0, [pc, #376]	; (8002aec <_printf_i+0x244>)
 8002974:	e019      	b.n	80029aa <_printf_i+0x102>
 8002976:	680e      	ldr	r6, [r1, #0]
 8002978:	f010 0f40 	tst.w	r0, #64	; 0x40
 800297c:	602b      	str	r3, [r5, #0]
 800297e:	bf18      	it	ne
 8002980:	b236      	sxthne	r6, r6
 8002982:	e7ef      	b.n	8002964 <_printf_i+0xbc>
 8002984:	682b      	ldr	r3, [r5, #0]
 8002986:	6820      	ldr	r0, [r4, #0]
 8002988:	1d19      	adds	r1, r3, #4
 800298a:	6029      	str	r1, [r5, #0]
 800298c:	0601      	lsls	r1, r0, #24
 800298e:	d501      	bpl.n	8002994 <_printf_i+0xec>
 8002990:	681e      	ldr	r6, [r3, #0]
 8002992:	e002      	b.n	800299a <_printf_i+0xf2>
 8002994:	0646      	lsls	r6, r0, #25
 8002996:	d5fb      	bpl.n	8002990 <_printf_i+0xe8>
 8002998:	881e      	ldrh	r6, [r3, #0]
 800299a:	2f6f      	cmp	r7, #111	; 0x6f
 800299c:	bf0c      	ite	eq
 800299e:	2308      	moveq	r3, #8
 80029a0:	230a      	movne	r3, #10
 80029a2:	4852      	ldr	r0, [pc, #328]	; (8002aec <_printf_i+0x244>)
 80029a4:	2100      	movs	r1, #0
 80029a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80029aa:	6865      	ldr	r5, [r4, #4]
 80029ac:	2d00      	cmp	r5, #0
 80029ae:	bfa8      	it	ge
 80029b0:	6821      	ldrge	r1, [r4, #0]
 80029b2:	60a5      	str	r5, [r4, #8]
 80029b4:	bfa4      	itt	ge
 80029b6:	f021 0104 	bicge.w	r1, r1, #4
 80029ba:	6021      	strge	r1, [r4, #0]
 80029bc:	b90e      	cbnz	r6, 80029c2 <_printf_i+0x11a>
 80029be:	2d00      	cmp	r5, #0
 80029c0:	d04d      	beq.n	8002a5e <_printf_i+0x1b6>
 80029c2:	4615      	mov	r5, r2
 80029c4:	fbb6 f1f3 	udiv	r1, r6, r3
 80029c8:	fb03 6711 	mls	r7, r3, r1, r6
 80029cc:	5dc7      	ldrb	r7, [r0, r7]
 80029ce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80029d2:	4637      	mov	r7, r6
 80029d4:	42bb      	cmp	r3, r7
 80029d6:	460e      	mov	r6, r1
 80029d8:	d9f4      	bls.n	80029c4 <_printf_i+0x11c>
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d10b      	bne.n	80029f6 <_printf_i+0x14e>
 80029de:	6823      	ldr	r3, [r4, #0]
 80029e0:	07de      	lsls	r6, r3, #31
 80029e2:	d508      	bpl.n	80029f6 <_printf_i+0x14e>
 80029e4:	6923      	ldr	r3, [r4, #16]
 80029e6:	6861      	ldr	r1, [r4, #4]
 80029e8:	4299      	cmp	r1, r3
 80029ea:	bfde      	ittt	le
 80029ec:	2330      	movle	r3, #48	; 0x30
 80029ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80029f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80029f6:	1b52      	subs	r2, r2, r5
 80029f8:	6122      	str	r2, [r4, #16]
 80029fa:	464b      	mov	r3, r9
 80029fc:	4621      	mov	r1, r4
 80029fe:	4640      	mov	r0, r8
 8002a00:	f8cd a000 	str.w	sl, [sp]
 8002a04:	aa03      	add	r2, sp, #12
 8002a06:	f7ff fedf 	bl	80027c8 <_printf_common>
 8002a0a:	3001      	adds	r0, #1
 8002a0c:	d14c      	bne.n	8002aa8 <_printf_i+0x200>
 8002a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a12:	b004      	add	sp, #16
 8002a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a18:	4834      	ldr	r0, [pc, #208]	; (8002aec <_printf_i+0x244>)
 8002a1a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002a1e:	6829      	ldr	r1, [r5, #0]
 8002a20:	6823      	ldr	r3, [r4, #0]
 8002a22:	f851 6b04 	ldr.w	r6, [r1], #4
 8002a26:	6029      	str	r1, [r5, #0]
 8002a28:	061d      	lsls	r5, r3, #24
 8002a2a:	d514      	bpl.n	8002a56 <_printf_i+0x1ae>
 8002a2c:	07df      	lsls	r7, r3, #31
 8002a2e:	bf44      	itt	mi
 8002a30:	f043 0320 	orrmi.w	r3, r3, #32
 8002a34:	6023      	strmi	r3, [r4, #0]
 8002a36:	b91e      	cbnz	r6, 8002a40 <_printf_i+0x198>
 8002a38:	6823      	ldr	r3, [r4, #0]
 8002a3a:	f023 0320 	bic.w	r3, r3, #32
 8002a3e:	6023      	str	r3, [r4, #0]
 8002a40:	2310      	movs	r3, #16
 8002a42:	e7af      	b.n	80029a4 <_printf_i+0xfc>
 8002a44:	6823      	ldr	r3, [r4, #0]
 8002a46:	f043 0320 	orr.w	r3, r3, #32
 8002a4a:	6023      	str	r3, [r4, #0]
 8002a4c:	2378      	movs	r3, #120	; 0x78
 8002a4e:	4828      	ldr	r0, [pc, #160]	; (8002af0 <_printf_i+0x248>)
 8002a50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002a54:	e7e3      	b.n	8002a1e <_printf_i+0x176>
 8002a56:	0659      	lsls	r1, r3, #25
 8002a58:	bf48      	it	mi
 8002a5a:	b2b6      	uxthmi	r6, r6
 8002a5c:	e7e6      	b.n	8002a2c <_printf_i+0x184>
 8002a5e:	4615      	mov	r5, r2
 8002a60:	e7bb      	b.n	80029da <_printf_i+0x132>
 8002a62:	682b      	ldr	r3, [r5, #0]
 8002a64:	6826      	ldr	r6, [r4, #0]
 8002a66:	1d18      	adds	r0, r3, #4
 8002a68:	6961      	ldr	r1, [r4, #20]
 8002a6a:	6028      	str	r0, [r5, #0]
 8002a6c:	0635      	lsls	r5, r6, #24
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	d501      	bpl.n	8002a76 <_printf_i+0x1ce>
 8002a72:	6019      	str	r1, [r3, #0]
 8002a74:	e002      	b.n	8002a7c <_printf_i+0x1d4>
 8002a76:	0670      	lsls	r0, r6, #25
 8002a78:	d5fb      	bpl.n	8002a72 <_printf_i+0x1ca>
 8002a7a:	8019      	strh	r1, [r3, #0]
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	4615      	mov	r5, r2
 8002a80:	6123      	str	r3, [r4, #16]
 8002a82:	e7ba      	b.n	80029fa <_printf_i+0x152>
 8002a84:	682b      	ldr	r3, [r5, #0]
 8002a86:	2100      	movs	r1, #0
 8002a88:	1d1a      	adds	r2, r3, #4
 8002a8a:	602a      	str	r2, [r5, #0]
 8002a8c:	681d      	ldr	r5, [r3, #0]
 8002a8e:	6862      	ldr	r2, [r4, #4]
 8002a90:	4628      	mov	r0, r5
 8002a92:	f000 fa9b 	bl	8002fcc <memchr>
 8002a96:	b108      	cbz	r0, 8002a9c <_printf_i+0x1f4>
 8002a98:	1b40      	subs	r0, r0, r5
 8002a9a:	6060      	str	r0, [r4, #4]
 8002a9c:	6863      	ldr	r3, [r4, #4]
 8002a9e:	6123      	str	r3, [r4, #16]
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002aa6:	e7a8      	b.n	80029fa <_printf_i+0x152>
 8002aa8:	462a      	mov	r2, r5
 8002aaa:	4649      	mov	r1, r9
 8002aac:	4640      	mov	r0, r8
 8002aae:	6923      	ldr	r3, [r4, #16]
 8002ab0:	47d0      	blx	sl
 8002ab2:	3001      	adds	r0, #1
 8002ab4:	d0ab      	beq.n	8002a0e <_printf_i+0x166>
 8002ab6:	6823      	ldr	r3, [r4, #0]
 8002ab8:	079b      	lsls	r3, r3, #30
 8002aba:	d413      	bmi.n	8002ae4 <_printf_i+0x23c>
 8002abc:	68e0      	ldr	r0, [r4, #12]
 8002abe:	9b03      	ldr	r3, [sp, #12]
 8002ac0:	4298      	cmp	r0, r3
 8002ac2:	bfb8      	it	lt
 8002ac4:	4618      	movlt	r0, r3
 8002ac6:	e7a4      	b.n	8002a12 <_printf_i+0x16a>
 8002ac8:	2301      	movs	r3, #1
 8002aca:	4632      	mov	r2, r6
 8002acc:	4649      	mov	r1, r9
 8002ace:	4640      	mov	r0, r8
 8002ad0:	47d0      	blx	sl
 8002ad2:	3001      	adds	r0, #1
 8002ad4:	d09b      	beq.n	8002a0e <_printf_i+0x166>
 8002ad6:	3501      	adds	r5, #1
 8002ad8:	68e3      	ldr	r3, [r4, #12]
 8002ada:	9903      	ldr	r1, [sp, #12]
 8002adc:	1a5b      	subs	r3, r3, r1
 8002ade:	42ab      	cmp	r3, r5
 8002ae0:	dcf2      	bgt.n	8002ac8 <_printf_i+0x220>
 8002ae2:	e7eb      	b.n	8002abc <_printf_i+0x214>
 8002ae4:	2500      	movs	r5, #0
 8002ae6:	f104 0619 	add.w	r6, r4, #25
 8002aea:	e7f5      	b.n	8002ad8 <_printf_i+0x230>
 8002aec:	08003415 	.word	0x08003415
 8002af0:	08003426 	.word	0x08003426

08002af4 <_sbrk_r>:
 8002af4:	b538      	push	{r3, r4, r5, lr}
 8002af6:	2300      	movs	r3, #0
 8002af8:	4d05      	ldr	r5, [pc, #20]	; (8002b10 <_sbrk_r+0x1c>)
 8002afa:	4604      	mov	r4, r0
 8002afc:	4608      	mov	r0, r1
 8002afe:	602b      	str	r3, [r5, #0]
 8002b00:	f7fd ffde 	bl	8000ac0 <_sbrk>
 8002b04:	1c43      	adds	r3, r0, #1
 8002b06:	d102      	bne.n	8002b0e <_sbrk_r+0x1a>
 8002b08:	682b      	ldr	r3, [r5, #0]
 8002b0a:	b103      	cbz	r3, 8002b0e <_sbrk_r+0x1a>
 8002b0c:	6023      	str	r3, [r4, #0]
 8002b0e:	bd38      	pop	{r3, r4, r5, pc}
 8002b10:	200001b0 	.word	0x200001b0

08002b14 <__sread>:
 8002b14:	b510      	push	{r4, lr}
 8002b16:	460c      	mov	r4, r1
 8002b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b1c:	f000 fb10 	bl	8003140 <_read_r>
 8002b20:	2800      	cmp	r0, #0
 8002b22:	bfab      	itete	ge
 8002b24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002b26:	89a3      	ldrhlt	r3, [r4, #12]
 8002b28:	181b      	addge	r3, r3, r0
 8002b2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002b2e:	bfac      	ite	ge
 8002b30:	6563      	strge	r3, [r4, #84]	; 0x54
 8002b32:	81a3      	strhlt	r3, [r4, #12]
 8002b34:	bd10      	pop	{r4, pc}

08002b36 <__swrite>:
 8002b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b3a:	461f      	mov	r7, r3
 8002b3c:	898b      	ldrh	r3, [r1, #12]
 8002b3e:	4605      	mov	r5, r0
 8002b40:	05db      	lsls	r3, r3, #23
 8002b42:	460c      	mov	r4, r1
 8002b44:	4616      	mov	r6, r2
 8002b46:	d505      	bpl.n	8002b54 <__swrite+0x1e>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b50:	f000 f9c4 	bl	8002edc <_lseek_r>
 8002b54:	89a3      	ldrh	r3, [r4, #12]
 8002b56:	4632      	mov	r2, r6
 8002b58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b5c:	81a3      	strh	r3, [r4, #12]
 8002b5e:	4628      	mov	r0, r5
 8002b60:	463b      	mov	r3, r7
 8002b62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b6a:	f000 b869 	b.w	8002c40 <_write_r>

08002b6e <__sseek>:
 8002b6e:	b510      	push	{r4, lr}
 8002b70:	460c      	mov	r4, r1
 8002b72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b76:	f000 f9b1 	bl	8002edc <_lseek_r>
 8002b7a:	1c43      	adds	r3, r0, #1
 8002b7c:	89a3      	ldrh	r3, [r4, #12]
 8002b7e:	bf15      	itete	ne
 8002b80:	6560      	strne	r0, [r4, #84]	; 0x54
 8002b82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002b86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002b8a:	81a3      	strheq	r3, [r4, #12]
 8002b8c:	bf18      	it	ne
 8002b8e:	81a3      	strhne	r3, [r4, #12]
 8002b90:	bd10      	pop	{r4, pc}

08002b92 <__sclose>:
 8002b92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b96:	f000 b8d3 	b.w	8002d40 <_close_r>
	...

08002b9c <__swbuf_r>:
 8002b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b9e:	460e      	mov	r6, r1
 8002ba0:	4614      	mov	r4, r2
 8002ba2:	4605      	mov	r5, r0
 8002ba4:	b118      	cbz	r0, 8002bae <__swbuf_r+0x12>
 8002ba6:	6983      	ldr	r3, [r0, #24]
 8002ba8:	b90b      	cbnz	r3, 8002bae <__swbuf_r+0x12>
 8002baa:	f7ff fa25 	bl	8001ff8 <__sinit>
 8002bae:	4b21      	ldr	r3, [pc, #132]	; (8002c34 <__swbuf_r+0x98>)
 8002bb0:	429c      	cmp	r4, r3
 8002bb2:	d12b      	bne.n	8002c0c <__swbuf_r+0x70>
 8002bb4:	686c      	ldr	r4, [r5, #4]
 8002bb6:	69a3      	ldr	r3, [r4, #24]
 8002bb8:	60a3      	str	r3, [r4, #8]
 8002bba:	89a3      	ldrh	r3, [r4, #12]
 8002bbc:	071a      	lsls	r2, r3, #28
 8002bbe:	d52f      	bpl.n	8002c20 <__swbuf_r+0x84>
 8002bc0:	6923      	ldr	r3, [r4, #16]
 8002bc2:	b36b      	cbz	r3, 8002c20 <__swbuf_r+0x84>
 8002bc4:	6923      	ldr	r3, [r4, #16]
 8002bc6:	6820      	ldr	r0, [r4, #0]
 8002bc8:	b2f6      	uxtb	r6, r6
 8002bca:	1ac0      	subs	r0, r0, r3
 8002bcc:	6963      	ldr	r3, [r4, #20]
 8002bce:	4637      	mov	r7, r6
 8002bd0:	4283      	cmp	r3, r0
 8002bd2:	dc04      	bgt.n	8002bde <__swbuf_r+0x42>
 8002bd4:	4621      	mov	r1, r4
 8002bd6:	4628      	mov	r0, r5
 8002bd8:	f000 f944 	bl	8002e64 <_fflush_r>
 8002bdc:	bb30      	cbnz	r0, 8002c2c <__swbuf_r+0x90>
 8002bde:	68a3      	ldr	r3, [r4, #8]
 8002be0:	3001      	adds	r0, #1
 8002be2:	3b01      	subs	r3, #1
 8002be4:	60a3      	str	r3, [r4, #8]
 8002be6:	6823      	ldr	r3, [r4, #0]
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	6022      	str	r2, [r4, #0]
 8002bec:	701e      	strb	r6, [r3, #0]
 8002bee:	6963      	ldr	r3, [r4, #20]
 8002bf0:	4283      	cmp	r3, r0
 8002bf2:	d004      	beq.n	8002bfe <__swbuf_r+0x62>
 8002bf4:	89a3      	ldrh	r3, [r4, #12]
 8002bf6:	07db      	lsls	r3, r3, #31
 8002bf8:	d506      	bpl.n	8002c08 <__swbuf_r+0x6c>
 8002bfa:	2e0a      	cmp	r6, #10
 8002bfc:	d104      	bne.n	8002c08 <__swbuf_r+0x6c>
 8002bfe:	4621      	mov	r1, r4
 8002c00:	4628      	mov	r0, r5
 8002c02:	f000 f92f 	bl	8002e64 <_fflush_r>
 8002c06:	b988      	cbnz	r0, 8002c2c <__swbuf_r+0x90>
 8002c08:	4638      	mov	r0, r7
 8002c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c0c:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <__swbuf_r+0x9c>)
 8002c0e:	429c      	cmp	r4, r3
 8002c10:	d101      	bne.n	8002c16 <__swbuf_r+0x7a>
 8002c12:	68ac      	ldr	r4, [r5, #8]
 8002c14:	e7cf      	b.n	8002bb6 <__swbuf_r+0x1a>
 8002c16:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <__swbuf_r+0xa0>)
 8002c18:	429c      	cmp	r4, r3
 8002c1a:	bf08      	it	eq
 8002c1c:	68ec      	ldreq	r4, [r5, #12]
 8002c1e:	e7ca      	b.n	8002bb6 <__swbuf_r+0x1a>
 8002c20:	4621      	mov	r1, r4
 8002c22:	4628      	mov	r0, r5
 8002c24:	f000 f81e 	bl	8002c64 <__swsetup_r>
 8002c28:	2800      	cmp	r0, #0
 8002c2a:	d0cb      	beq.n	8002bc4 <__swbuf_r+0x28>
 8002c2c:	f04f 37ff 	mov.w	r7, #4294967295
 8002c30:	e7ea      	b.n	8002c08 <__swbuf_r+0x6c>
 8002c32:	bf00      	nop
 8002c34:	080033c4 	.word	0x080033c4
 8002c38:	080033e4 	.word	0x080033e4
 8002c3c:	080033a4 	.word	0x080033a4

08002c40 <_write_r>:
 8002c40:	b538      	push	{r3, r4, r5, lr}
 8002c42:	4604      	mov	r4, r0
 8002c44:	4608      	mov	r0, r1
 8002c46:	4611      	mov	r1, r2
 8002c48:	2200      	movs	r2, #0
 8002c4a:	4d05      	ldr	r5, [pc, #20]	; (8002c60 <_write_r+0x20>)
 8002c4c:	602a      	str	r2, [r5, #0]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	f7fd faaa 	bl	80001a8 <_write>
 8002c54:	1c43      	adds	r3, r0, #1
 8002c56:	d102      	bne.n	8002c5e <_write_r+0x1e>
 8002c58:	682b      	ldr	r3, [r5, #0]
 8002c5a:	b103      	cbz	r3, 8002c5e <_write_r+0x1e>
 8002c5c:	6023      	str	r3, [r4, #0]
 8002c5e:	bd38      	pop	{r3, r4, r5, pc}
 8002c60:	200001b0 	.word	0x200001b0

08002c64 <__swsetup_r>:
 8002c64:	4b32      	ldr	r3, [pc, #200]	; (8002d30 <__swsetup_r+0xcc>)
 8002c66:	b570      	push	{r4, r5, r6, lr}
 8002c68:	681d      	ldr	r5, [r3, #0]
 8002c6a:	4606      	mov	r6, r0
 8002c6c:	460c      	mov	r4, r1
 8002c6e:	b125      	cbz	r5, 8002c7a <__swsetup_r+0x16>
 8002c70:	69ab      	ldr	r3, [r5, #24]
 8002c72:	b913      	cbnz	r3, 8002c7a <__swsetup_r+0x16>
 8002c74:	4628      	mov	r0, r5
 8002c76:	f7ff f9bf 	bl	8001ff8 <__sinit>
 8002c7a:	4b2e      	ldr	r3, [pc, #184]	; (8002d34 <__swsetup_r+0xd0>)
 8002c7c:	429c      	cmp	r4, r3
 8002c7e:	d10f      	bne.n	8002ca0 <__swsetup_r+0x3c>
 8002c80:	686c      	ldr	r4, [r5, #4]
 8002c82:	89a3      	ldrh	r3, [r4, #12]
 8002c84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002c88:	0719      	lsls	r1, r3, #28
 8002c8a:	d42c      	bmi.n	8002ce6 <__swsetup_r+0x82>
 8002c8c:	06dd      	lsls	r5, r3, #27
 8002c8e:	d411      	bmi.n	8002cb4 <__swsetup_r+0x50>
 8002c90:	2309      	movs	r3, #9
 8002c92:	6033      	str	r3, [r6, #0]
 8002c94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002c98:	f04f 30ff 	mov.w	r0, #4294967295
 8002c9c:	81a3      	strh	r3, [r4, #12]
 8002c9e:	e03e      	b.n	8002d1e <__swsetup_r+0xba>
 8002ca0:	4b25      	ldr	r3, [pc, #148]	; (8002d38 <__swsetup_r+0xd4>)
 8002ca2:	429c      	cmp	r4, r3
 8002ca4:	d101      	bne.n	8002caa <__swsetup_r+0x46>
 8002ca6:	68ac      	ldr	r4, [r5, #8]
 8002ca8:	e7eb      	b.n	8002c82 <__swsetup_r+0x1e>
 8002caa:	4b24      	ldr	r3, [pc, #144]	; (8002d3c <__swsetup_r+0xd8>)
 8002cac:	429c      	cmp	r4, r3
 8002cae:	bf08      	it	eq
 8002cb0:	68ec      	ldreq	r4, [r5, #12]
 8002cb2:	e7e6      	b.n	8002c82 <__swsetup_r+0x1e>
 8002cb4:	0758      	lsls	r0, r3, #29
 8002cb6:	d512      	bpl.n	8002cde <__swsetup_r+0x7a>
 8002cb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002cba:	b141      	cbz	r1, 8002cce <__swsetup_r+0x6a>
 8002cbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002cc0:	4299      	cmp	r1, r3
 8002cc2:	d002      	beq.n	8002cca <__swsetup_r+0x66>
 8002cc4:	4630      	mov	r0, r6
 8002cc6:	f000 f9c3 	bl	8003050 <_free_r>
 8002cca:	2300      	movs	r3, #0
 8002ccc:	6363      	str	r3, [r4, #52]	; 0x34
 8002cce:	89a3      	ldrh	r3, [r4, #12]
 8002cd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002cd4:	81a3      	strh	r3, [r4, #12]
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	6063      	str	r3, [r4, #4]
 8002cda:	6923      	ldr	r3, [r4, #16]
 8002cdc:	6023      	str	r3, [r4, #0]
 8002cde:	89a3      	ldrh	r3, [r4, #12]
 8002ce0:	f043 0308 	orr.w	r3, r3, #8
 8002ce4:	81a3      	strh	r3, [r4, #12]
 8002ce6:	6923      	ldr	r3, [r4, #16]
 8002ce8:	b94b      	cbnz	r3, 8002cfe <__swsetup_r+0x9a>
 8002cea:	89a3      	ldrh	r3, [r4, #12]
 8002cec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cf4:	d003      	beq.n	8002cfe <__swsetup_r+0x9a>
 8002cf6:	4621      	mov	r1, r4
 8002cf8:	4630      	mov	r0, r6
 8002cfa:	f000 f927 	bl	8002f4c <__smakebuf_r>
 8002cfe:	89a0      	ldrh	r0, [r4, #12]
 8002d00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002d04:	f010 0301 	ands.w	r3, r0, #1
 8002d08:	d00a      	beq.n	8002d20 <__swsetup_r+0xbc>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60a3      	str	r3, [r4, #8]
 8002d0e:	6963      	ldr	r3, [r4, #20]
 8002d10:	425b      	negs	r3, r3
 8002d12:	61a3      	str	r3, [r4, #24]
 8002d14:	6923      	ldr	r3, [r4, #16]
 8002d16:	b943      	cbnz	r3, 8002d2a <__swsetup_r+0xc6>
 8002d18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002d1c:	d1ba      	bne.n	8002c94 <__swsetup_r+0x30>
 8002d1e:	bd70      	pop	{r4, r5, r6, pc}
 8002d20:	0781      	lsls	r1, r0, #30
 8002d22:	bf58      	it	pl
 8002d24:	6963      	ldrpl	r3, [r4, #20]
 8002d26:	60a3      	str	r3, [r4, #8]
 8002d28:	e7f4      	b.n	8002d14 <__swsetup_r+0xb0>
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	e7f7      	b.n	8002d1e <__swsetup_r+0xba>
 8002d2e:	bf00      	nop
 8002d30:	2000000c 	.word	0x2000000c
 8002d34:	080033c4 	.word	0x080033c4
 8002d38:	080033e4 	.word	0x080033e4
 8002d3c:	080033a4 	.word	0x080033a4

08002d40 <_close_r>:
 8002d40:	b538      	push	{r3, r4, r5, lr}
 8002d42:	2300      	movs	r3, #0
 8002d44:	4d05      	ldr	r5, [pc, #20]	; (8002d5c <_close_r+0x1c>)
 8002d46:	4604      	mov	r4, r0
 8002d48:	4608      	mov	r0, r1
 8002d4a:	602b      	str	r3, [r5, #0]
 8002d4c:	f7fd fe88 	bl	8000a60 <_close>
 8002d50:	1c43      	adds	r3, r0, #1
 8002d52:	d102      	bne.n	8002d5a <_close_r+0x1a>
 8002d54:	682b      	ldr	r3, [r5, #0]
 8002d56:	b103      	cbz	r3, 8002d5a <_close_r+0x1a>
 8002d58:	6023      	str	r3, [r4, #0]
 8002d5a:	bd38      	pop	{r3, r4, r5, pc}
 8002d5c:	200001b0 	.word	0x200001b0

08002d60 <__sflush_r>:
 8002d60:	898a      	ldrh	r2, [r1, #12]
 8002d62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d64:	4605      	mov	r5, r0
 8002d66:	0710      	lsls	r0, r2, #28
 8002d68:	460c      	mov	r4, r1
 8002d6a:	d457      	bmi.n	8002e1c <__sflush_r+0xbc>
 8002d6c:	684b      	ldr	r3, [r1, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	dc04      	bgt.n	8002d7c <__sflush_r+0x1c>
 8002d72:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	dc01      	bgt.n	8002d7c <__sflush_r+0x1c>
 8002d78:	2000      	movs	r0, #0
 8002d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d7e:	2e00      	cmp	r6, #0
 8002d80:	d0fa      	beq.n	8002d78 <__sflush_r+0x18>
 8002d82:	2300      	movs	r3, #0
 8002d84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002d88:	682f      	ldr	r7, [r5, #0]
 8002d8a:	602b      	str	r3, [r5, #0]
 8002d8c:	d032      	beq.n	8002df4 <__sflush_r+0x94>
 8002d8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002d90:	89a3      	ldrh	r3, [r4, #12]
 8002d92:	075a      	lsls	r2, r3, #29
 8002d94:	d505      	bpl.n	8002da2 <__sflush_r+0x42>
 8002d96:	6863      	ldr	r3, [r4, #4]
 8002d98:	1ac0      	subs	r0, r0, r3
 8002d9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d9c:	b10b      	cbz	r3, 8002da2 <__sflush_r+0x42>
 8002d9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002da0:	1ac0      	subs	r0, r0, r3
 8002da2:	2300      	movs	r3, #0
 8002da4:	4602      	mov	r2, r0
 8002da6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002da8:	4628      	mov	r0, r5
 8002daa:	6a21      	ldr	r1, [r4, #32]
 8002dac:	47b0      	blx	r6
 8002dae:	1c43      	adds	r3, r0, #1
 8002db0:	89a3      	ldrh	r3, [r4, #12]
 8002db2:	d106      	bne.n	8002dc2 <__sflush_r+0x62>
 8002db4:	6829      	ldr	r1, [r5, #0]
 8002db6:	291d      	cmp	r1, #29
 8002db8:	d82c      	bhi.n	8002e14 <__sflush_r+0xb4>
 8002dba:	4a29      	ldr	r2, [pc, #164]	; (8002e60 <__sflush_r+0x100>)
 8002dbc:	40ca      	lsrs	r2, r1
 8002dbe:	07d6      	lsls	r6, r2, #31
 8002dc0:	d528      	bpl.n	8002e14 <__sflush_r+0xb4>
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	6062      	str	r2, [r4, #4]
 8002dc6:	6922      	ldr	r2, [r4, #16]
 8002dc8:	04d9      	lsls	r1, r3, #19
 8002dca:	6022      	str	r2, [r4, #0]
 8002dcc:	d504      	bpl.n	8002dd8 <__sflush_r+0x78>
 8002dce:	1c42      	adds	r2, r0, #1
 8002dd0:	d101      	bne.n	8002dd6 <__sflush_r+0x76>
 8002dd2:	682b      	ldr	r3, [r5, #0]
 8002dd4:	b903      	cbnz	r3, 8002dd8 <__sflush_r+0x78>
 8002dd6:	6560      	str	r0, [r4, #84]	; 0x54
 8002dd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002dda:	602f      	str	r7, [r5, #0]
 8002ddc:	2900      	cmp	r1, #0
 8002dde:	d0cb      	beq.n	8002d78 <__sflush_r+0x18>
 8002de0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002de4:	4299      	cmp	r1, r3
 8002de6:	d002      	beq.n	8002dee <__sflush_r+0x8e>
 8002de8:	4628      	mov	r0, r5
 8002dea:	f000 f931 	bl	8003050 <_free_r>
 8002dee:	2000      	movs	r0, #0
 8002df0:	6360      	str	r0, [r4, #52]	; 0x34
 8002df2:	e7c2      	b.n	8002d7a <__sflush_r+0x1a>
 8002df4:	6a21      	ldr	r1, [r4, #32]
 8002df6:	2301      	movs	r3, #1
 8002df8:	4628      	mov	r0, r5
 8002dfa:	47b0      	blx	r6
 8002dfc:	1c41      	adds	r1, r0, #1
 8002dfe:	d1c7      	bne.n	8002d90 <__sflush_r+0x30>
 8002e00:	682b      	ldr	r3, [r5, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0c4      	beq.n	8002d90 <__sflush_r+0x30>
 8002e06:	2b1d      	cmp	r3, #29
 8002e08:	d001      	beq.n	8002e0e <__sflush_r+0xae>
 8002e0a:	2b16      	cmp	r3, #22
 8002e0c:	d101      	bne.n	8002e12 <__sflush_r+0xb2>
 8002e0e:	602f      	str	r7, [r5, #0]
 8002e10:	e7b2      	b.n	8002d78 <__sflush_r+0x18>
 8002e12:	89a3      	ldrh	r3, [r4, #12]
 8002e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e18:	81a3      	strh	r3, [r4, #12]
 8002e1a:	e7ae      	b.n	8002d7a <__sflush_r+0x1a>
 8002e1c:	690f      	ldr	r7, [r1, #16]
 8002e1e:	2f00      	cmp	r7, #0
 8002e20:	d0aa      	beq.n	8002d78 <__sflush_r+0x18>
 8002e22:	0793      	lsls	r3, r2, #30
 8002e24:	bf18      	it	ne
 8002e26:	2300      	movne	r3, #0
 8002e28:	680e      	ldr	r6, [r1, #0]
 8002e2a:	bf08      	it	eq
 8002e2c:	694b      	ldreq	r3, [r1, #20]
 8002e2e:	1bf6      	subs	r6, r6, r7
 8002e30:	600f      	str	r7, [r1, #0]
 8002e32:	608b      	str	r3, [r1, #8]
 8002e34:	2e00      	cmp	r6, #0
 8002e36:	dd9f      	ble.n	8002d78 <__sflush_r+0x18>
 8002e38:	4633      	mov	r3, r6
 8002e3a:	463a      	mov	r2, r7
 8002e3c:	4628      	mov	r0, r5
 8002e3e:	6a21      	ldr	r1, [r4, #32]
 8002e40:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002e44:	47e0      	blx	ip
 8002e46:	2800      	cmp	r0, #0
 8002e48:	dc06      	bgt.n	8002e58 <__sflush_r+0xf8>
 8002e4a:	89a3      	ldrh	r3, [r4, #12]
 8002e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e54:	81a3      	strh	r3, [r4, #12]
 8002e56:	e790      	b.n	8002d7a <__sflush_r+0x1a>
 8002e58:	4407      	add	r7, r0
 8002e5a:	1a36      	subs	r6, r6, r0
 8002e5c:	e7ea      	b.n	8002e34 <__sflush_r+0xd4>
 8002e5e:	bf00      	nop
 8002e60:	20400001 	.word	0x20400001

08002e64 <_fflush_r>:
 8002e64:	b538      	push	{r3, r4, r5, lr}
 8002e66:	690b      	ldr	r3, [r1, #16]
 8002e68:	4605      	mov	r5, r0
 8002e6a:	460c      	mov	r4, r1
 8002e6c:	b913      	cbnz	r3, 8002e74 <_fflush_r+0x10>
 8002e6e:	2500      	movs	r5, #0
 8002e70:	4628      	mov	r0, r5
 8002e72:	bd38      	pop	{r3, r4, r5, pc}
 8002e74:	b118      	cbz	r0, 8002e7e <_fflush_r+0x1a>
 8002e76:	6983      	ldr	r3, [r0, #24]
 8002e78:	b90b      	cbnz	r3, 8002e7e <_fflush_r+0x1a>
 8002e7a:	f7ff f8bd 	bl	8001ff8 <__sinit>
 8002e7e:	4b14      	ldr	r3, [pc, #80]	; (8002ed0 <_fflush_r+0x6c>)
 8002e80:	429c      	cmp	r4, r3
 8002e82:	d11b      	bne.n	8002ebc <_fflush_r+0x58>
 8002e84:	686c      	ldr	r4, [r5, #4]
 8002e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0ef      	beq.n	8002e6e <_fflush_r+0xa>
 8002e8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002e90:	07d0      	lsls	r0, r2, #31
 8002e92:	d404      	bmi.n	8002e9e <_fflush_r+0x3a>
 8002e94:	0599      	lsls	r1, r3, #22
 8002e96:	d402      	bmi.n	8002e9e <_fflush_r+0x3a>
 8002e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e9a:	f7ff f94b 	bl	8002134 <__retarget_lock_acquire_recursive>
 8002e9e:	4628      	mov	r0, r5
 8002ea0:	4621      	mov	r1, r4
 8002ea2:	f7ff ff5d 	bl	8002d60 <__sflush_r>
 8002ea6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ea8:	4605      	mov	r5, r0
 8002eaa:	07da      	lsls	r2, r3, #31
 8002eac:	d4e0      	bmi.n	8002e70 <_fflush_r+0xc>
 8002eae:	89a3      	ldrh	r3, [r4, #12]
 8002eb0:	059b      	lsls	r3, r3, #22
 8002eb2:	d4dd      	bmi.n	8002e70 <_fflush_r+0xc>
 8002eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002eb6:	f7ff f93e 	bl	8002136 <__retarget_lock_release_recursive>
 8002eba:	e7d9      	b.n	8002e70 <_fflush_r+0xc>
 8002ebc:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <_fflush_r+0x70>)
 8002ebe:	429c      	cmp	r4, r3
 8002ec0:	d101      	bne.n	8002ec6 <_fflush_r+0x62>
 8002ec2:	68ac      	ldr	r4, [r5, #8]
 8002ec4:	e7df      	b.n	8002e86 <_fflush_r+0x22>
 8002ec6:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <_fflush_r+0x74>)
 8002ec8:	429c      	cmp	r4, r3
 8002eca:	bf08      	it	eq
 8002ecc:	68ec      	ldreq	r4, [r5, #12]
 8002ece:	e7da      	b.n	8002e86 <_fflush_r+0x22>
 8002ed0:	080033c4 	.word	0x080033c4
 8002ed4:	080033e4 	.word	0x080033e4
 8002ed8:	080033a4 	.word	0x080033a4

08002edc <_lseek_r>:
 8002edc:	b538      	push	{r3, r4, r5, lr}
 8002ede:	4604      	mov	r4, r0
 8002ee0:	4608      	mov	r0, r1
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	4d05      	ldr	r5, [pc, #20]	; (8002efc <_lseek_r+0x20>)
 8002ee8:	602a      	str	r2, [r5, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	f7fd fddc 	bl	8000aa8 <_lseek>
 8002ef0:	1c43      	adds	r3, r0, #1
 8002ef2:	d102      	bne.n	8002efa <_lseek_r+0x1e>
 8002ef4:	682b      	ldr	r3, [r5, #0]
 8002ef6:	b103      	cbz	r3, 8002efa <_lseek_r+0x1e>
 8002ef8:	6023      	str	r3, [r4, #0]
 8002efa:	bd38      	pop	{r3, r4, r5, pc}
 8002efc:	200001b0 	.word	0x200001b0

08002f00 <__swhatbuf_r>:
 8002f00:	b570      	push	{r4, r5, r6, lr}
 8002f02:	460e      	mov	r6, r1
 8002f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f08:	4614      	mov	r4, r2
 8002f0a:	2900      	cmp	r1, #0
 8002f0c:	461d      	mov	r5, r3
 8002f0e:	b096      	sub	sp, #88	; 0x58
 8002f10:	da08      	bge.n	8002f24 <__swhatbuf_r+0x24>
 8002f12:	2200      	movs	r2, #0
 8002f14:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002f18:	602a      	str	r2, [r5, #0]
 8002f1a:	061a      	lsls	r2, r3, #24
 8002f1c:	d410      	bmi.n	8002f40 <__swhatbuf_r+0x40>
 8002f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f22:	e00e      	b.n	8002f42 <__swhatbuf_r+0x42>
 8002f24:	466a      	mov	r2, sp
 8002f26:	f000 f91d 	bl	8003164 <_fstat_r>
 8002f2a:	2800      	cmp	r0, #0
 8002f2c:	dbf1      	blt.n	8002f12 <__swhatbuf_r+0x12>
 8002f2e:	9a01      	ldr	r2, [sp, #4]
 8002f30:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002f34:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002f38:	425a      	negs	r2, r3
 8002f3a:	415a      	adcs	r2, r3
 8002f3c:	602a      	str	r2, [r5, #0]
 8002f3e:	e7ee      	b.n	8002f1e <__swhatbuf_r+0x1e>
 8002f40:	2340      	movs	r3, #64	; 0x40
 8002f42:	2000      	movs	r0, #0
 8002f44:	6023      	str	r3, [r4, #0]
 8002f46:	b016      	add	sp, #88	; 0x58
 8002f48:	bd70      	pop	{r4, r5, r6, pc}
	...

08002f4c <__smakebuf_r>:
 8002f4c:	898b      	ldrh	r3, [r1, #12]
 8002f4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002f50:	079d      	lsls	r5, r3, #30
 8002f52:	4606      	mov	r6, r0
 8002f54:	460c      	mov	r4, r1
 8002f56:	d507      	bpl.n	8002f68 <__smakebuf_r+0x1c>
 8002f58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002f5c:	6023      	str	r3, [r4, #0]
 8002f5e:	6123      	str	r3, [r4, #16]
 8002f60:	2301      	movs	r3, #1
 8002f62:	6163      	str	r3, [r4, #20]
 8002f64:	b002      	add	sp, #8
 8002f66:	bd70      	pop	{r4, r5, r6, pc}
 8002f68:	466a      	mov	r2, sp
 8002f6a:	ab01      	add	r3, sp, #4
 8002f6c:	f7ff ffc8 	bl	8002f00 <__swhatbuf_r>
 8002f70:	9900      	ldr	r1, [sp, #0]
 8002f72:	4605      	mov	r5, r0
 8002f74:	4630      	mov	r0, r6
 8002f76:	f7ff f8ff 	bl	8002178 <_malloc_r>
 8002f7a:	b948      	cbnz	r0, 8002f90 <__smakebuf_r+0x44>
 8002f7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f80:	059a      	lsls	r2, r3, #22
 8002f82:	d4ef      	bmi.n	8002f64 <__smakebuf_r+0x18>
 8002f84:	f023 0303 	bic.w	r3, r3, #3
 8002f88:	f043 0302 	orr.w	r3, r3, #2
 8002f8c:	81a3      	strh	r3, [r4, #12]
 8002f8e:	e7e3      	b.n	8002f58 <__smakebuf_r+0xc>
 8002f90:	4b0d      	ldr	r3, [pc, #52]	; (8002fc8 <__smakebuf_r+0x7c>)
 8002f92:	62b3      	str	r3, [r6, #40]	; 0x28
 8002f94:	89a3      	ldrh	r3, [r4, #12]
 8002f96:	6020      	str	r0, [r4, #0]
 8002f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f9c:	81a3      	strh	r3, [r4, #12]
 8002f9e:	9b00      	ldr	r3, [sp, #0]
 8002fa0:	6120      	str	r0, [r4, #16]
 8002fa2:	6163      	str	r3, [r4, #20]
 8002fa4:	9b01      	ldr	r3, [sp, #4]
 8002fa6:	b15b      	cbz	r3, 8002fc0 <__smakebuf_r+0x74>
 8002fa8:	4630      	mov	r0, r6
 8002faa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002fae:	f000 f8eb 	bl	8003188 <_isatty_r>
 8002fb2:	b128      	cbz	r0, 8002fc0 <__smakebuf_r+0x74>
 8002fb4:	89a3      	ldrh	r3, [r4, #12]
 8002fb6:	f023 0303 	bic.w	r3, r3, #3
 8002fba:	f043 0301 	orr.w	r3, r3, #1
 8002fbe:	81a3      	strh	r3, [r4, #12]
 8002fc0:	89a0      	ldrh	r0, [r4, #12]
 8002fc2:	4305      	orrs	r5, r0
 8002fc4:	81a5      	strh	r5, [r4, #12]
 8002fc6:	e7cd      	b.n	8002f64 <__smakebuf_r+0x18>
 8002fc8:	08001f91 	.word	0x08001f91

08002fcc <memchr>:
 8002fcc:	4603      	mov	r3, r0
 8002fce:	b510      	push	{r4, lr}
 8002fd0:	b2c9      	uxtb	r1, r1
 8002fd2:	4402      	add	r2, r0
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	d101      	bne.n	8002fde <memchr+0x12>
 8002fda:	2000      	movs	r0, #0
 8002fdc:	e003      	b.n	8002fe6 <memchr+0x1a>
 8002fde:	7804      	ldrb	r4, [r0, #0]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	428c      	cmp	r4, r1
 8002fe4:	d1f6      	bne.n	8002fd4 <memchr+0x8>
 8002fe6:	bd10      	pop	{r4, pc}

08002fe8 <memcpy>:
 8002fe8:	440a      	add	r2, r1
 8002fea:	4291      	cmp	r1, r2
 8002fec:	f100 33ff 	add.w	r3, r0, #4294967295
 8002ff0:	d100      	bne.n	8002ff4 <memcpy+0xc>
 8002ff2:	4770      	bx	lr
 8002ff4:	b510      	push	{r4, lr}
 8002ff6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ffa:	4291      	cmp	r1, r2
 8002ffc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003000:	d1f9      	bne.n	8002ff6 <memcpy+0xe>
 8003002:	bd10      	pop	{r4, pc}

08003004 <memmove>:
 8003004:	4288      	cmp	r0, r1
 8003006:	b510      	push	{r4, lr}
 8003008:	eb01 0402 	add.w	r4, r1, r2
 800300c:	d902      	bls.n	8003014 <memmove+0x10>
 800300e:	4284      	cmp	r4, r0
 8003010:	4623      	mov	r3, r4
 8003012:	d807      	bhi.n	8003024 <memmove+0x20>
 8003014:	1e43      	subs	r3, r0, #1
 8003016:	42a1      	cmp	r1, r4
 8003018:	d008      	beq.n	800302c <memmove+0x28>
 800301a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800301e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003022:	e7f8      	b.n	8003016 <memmove+0x12>
 8003024:	4601      	mov	r1, r0
 8003026:	4402      	add	r2, r0
 8003028:	428a      	cmp	r2, r1
 800302a:	d100      	bne.n	800302e <memmove+0x2a>
 800302c:	bd10      	pop	{r4, pc}
 800302e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003032:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003036:	e7f7      	b.n	8003028 <memmove+0x24>

08003038 <__malloc_lock>:
 8003038:	4801      	ldr	r0, [pc, #4]	; (8003040 <__malloc_lock+0x8>)
 800303a:	f7ff b87b 	b.w	8002134 <__retarget_lock_acquire_recursive>
 800303e:	bf00      	nop
 8003040:	200001a4 	.word	0x200001a4

08003044 <__malloc_unlock>:
 8003044:	4801      	ldr	r0, [pc, #4]	; (800304c <__malloc_unlock+0x8>)
 8003046:	f7ff b876 	b.w	8002136 <__retarget_lock_release_recursive>
 800304a:	bf00      	nop
 800304c:	200001a4 	.word	0x200001a4

08003050 <_free_r>:
 8003050:	b538      	push	{r3, r4, r5, lr}
 8003052:	4605      	mov	r5, r0
 8003054:	2900      	cmp	r1, #0
 8003056:	d040      	beq.n	80030da <_free_r+0x8a>
 8003058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800305c:	1f0c      	subs	r4, r1, #4
 800305e:	2b00      	cmp	r3, #0
 8003060:	bfb8      	it	lt
 8003062:	18e4      	addlt	r4, r4, r3
 8003064:	f7ff ffe8 	bl	8003038 <__malloc_lock>
 8003068:	4a1c      	ldr	r2, [pc, #112]	; (80030dc <_free_r+0x8c>)
 800306a:	6813      	ldr	r3, [r2, #0]
 800306c:	b933      	cbnz	r3, 800307c <_free_r+0x2c>
 800306e:	6063      	str	r3, [r4, #4]
 8003070:	6014      	str	r4, [r2, #0]
 8003072:	4628      	mov	r0, r5
 8003074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003078:	f7ff bfe4 	b.w	8003044 <__malloc_unlock>
 800307c:	42a3      	cmp	r3, r4
 800307e:	d908      	bls.n	8003092 <_free_r+0x42>
 8003080:	6820      	ldr	r0, [r4, #0]
 8003082:	1821      	adds	r1, r4, r0
 8003084:	428b      	cmp	r3, r1
 8003086:	bf01      	itttt	eq
 8003088:	6819      	ldreq	r1, [r3, #0]
 800308a:	685b      	ldreq	r3, [r3, #4]
 800308c:	1809      	addeq	r1, r1, r0
 800308e:	6021      	streq	r1, [r4, #0]
 8003090:	e7ed      	b.n	800306e <_free_r+0x1e>
 8003092:	461a      	mov	r2, r3
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	b10b      	cbz	r3, 800309c <_free_r+0x4c>
 8003098:	42a3      	cmp	r3, r4
 800309a:	d9fa      	bls.n	8003092 <_free_r+0x42>
 800309c:	6811      	ldr	r1, [r2, #0]
 800309e:	1850      	adds	r0, r2, r1
 80030a0:	42a0      	cmp	r0, r4
 80030a2:	d10b      	bne.n	80030bc <_free_r+0x6c>
 80030a4:	6820      	ldr	r0, [r4, #0]
 80030a6:	4401      	add	r1, r0
 80030a8:	1850      	adds	r0, r2, r1
 80030aa:	4283      	cmp	r3, r0
 80030ac:	6011      	str	r1, [r2, #0]
 80030ae:	d1e0      	bne.n	8003072 <_free_r+0x22>
 80030b0:	6818      	ldr	r0, [r3, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	4401      	add	r1, r0
 80030b6:	6011      	str	r1, [r2, #0]
 80030b8:	6053      	str	r3, [r2, #4]
 80030ba:	e7da      	b.n	8003072 <_free_r+0x22>
 80030bc:	d902      	bls.n	80030c4 <_free_r+0x74>
 80030be:	230c      	movs	r3, #12
 80030c0:	602b      	str	r3, [r5, #0]
 80030c2:	e7d6      	b.n	8003072 <_free_r+0x22>
 80030c4:	6820      	ldr	r0, [r4, #0]
 80030c6:	1821      	adds	r1, r4, r0
 80030c8:	428b      	cmp	r3, r1
 80030ca:	bf01      	itttt	eq
 80030cc:	6819      	ldreq	r1, [r3, #0]
 80030ce:	685b      	ldreq	r3, [r3, #4]
 80030d0:	1809      	addeq	r1, r1, r0
 80030d2:	6021      	streq	r1, [r4, #0]
 80030d4:	6063      	str	r3, [r4, #4]
 80030d6:	6054      	str	r4, [r2, #4]
 80030d8:	e7cb      	b.n	8003072 <_free_r+0x22>
 80030da:	bd38      	pop	{r3, r4, r5, pc}
 80030dc:	200001a8 	.word	0x200001a8

080030e0 <_realloc_r>:
 80030e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030e4:	4680      	mov	r8, r0
 80030e6:	4614      	mov	r4, r2
 80030e8:	460e      	mov	r6, r1
 80030ea:	b921      	cbnz	r1, 80030f6 <_realloc_r+0x16>
 80030ec:	4611      	mov	r1, r2
 80030ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80030f2:	f7ff b841 	b.w	8002178 <_malloc_r>
 80030f6:	b92a      	cbnz	r2, 8003104 <_realloc_r+0x24>
 80030f8:	f7ff ffaa 	bl	8003050 <_free_r>
 80030fc:	4625      	mov	r5, r4
 80030fe:	4628      	mov	r0, r5
 8003100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003104:	f000 f850 	bl	80031a8 <_malloc_usable_size_r>
 8003108:	4284      	cmp	r4, r0
 800310a:	4607      	mov	r7, r0
 800310c:	d802      	bhi.n	8003114 <_realloc_r+0x34>
 800310e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003112:	d812      	bhi.n	800313a <_realloc_r+0x5a>
 8003114:	4621      	mov	r1, r4
 8003116:	4640      	mov	r0, r8
 8003118:	f7ff f82e 	bl	8002178 <_malloc_r>
 800311c:	4605      	mov	r5, r0
 800311e:	2800      	cmp	r0, #0
 8003120:	d0ed      	beq.n	80030fe <_realloc_r+0x1e>
 8003122:	42bc      	cmp	r4, r7
 8003124:	4622      	mov	r2, r4
 8003126:	4631      	mov	r1, r6
 8003128:	bf28      	it	cs
 800312a:	463a      	movcs	r2, r7
 800312c:	f7ff ff5c 	bl	8002fe8 <memcpy>
 8003130:	4631      	mov	r1, r6
 8003132:	4640      	mov	r0, r8
 8003134:	f7ff ff8c 	bl	8003050 <_free_r>
 8003138:	e7e1      	b.n	80030fe <_realloc_r+0x1e>
 800313a:	4635      	mov	r5, r6
 800313c:	e7df      	b.n	80030fe <_realloc_r+0x1e>
	...

08003140 <_read_r>:
 8003140:	b538      	push	{r3, r4, r5, lr}
 8003142:	4604      	mov	r4, r0
 8003144:	4608      	mov	r0, r1
 8003146:	4611      	mov	r1, r2
 8003148:	2200      	movs	r2, #0
 800314a:	4d05      	ldr	r5, [pc, #20]	; (8003160 <_read_r+0x20>)
 800314c:	602a      	str	r2, [r5, #0]
 800314e:	461a      	mov	r2, r3
 8003150:	f7fd fc69 	bl	8000a26 <_read>
 8003154:	1c43      	adds	r3, r0, #1
 8003156:	d102      	bne.n	800315e <_read_r+0x1e>
 8003158:	682b      	ldr	r3, [r5, #0]
 800315a:	b103      	cbz	r3, 800315e <_read_r+0x1e>
 800315c:	6023      	str	r3, [r4, #0]
 800315e:	bd38      	pop	{r3, r4, r5, pc}
 8003160:	200001b0 	.word	0x200001b0

08003164 <_fstat_r>:
 8003164:	b538      	push	{r3, r4, r5, lr}
 8003166:	2300      	movs	r3, #0
 8003168:	4d06      	ldr	r5, [pc, #24]	; (8003184 <_fstat_r+0x20>)
 800316a:	4604      	mov	r4, r0
 800316c:	4608      	mov	r0, r1
 800316e:	4611      	mov	r1, r2
 8003170:	602b      	str	r3, [r5, #0]
 8003172:	f7fd fc80 	bl	8000a76 <_fstat>
 8003176:	1c43      	adds	r3, r0, #1
 8003178:	d102      	bne.n	8003180 <_fstat_r+0x1c>
 800317a:	682b      	ldr	r3, [r5, #0]
 800317c:	b103      	cbz	r3, 8003180 <_fstat_r+0x1c>
 800317e:	6023      	str	r3, [r4, #0]
 8003180:	bd38      	pop	{r3, r4, r5, pc}
 8003182:	bf00      	nop
 8003184:	200001b0 	.word	0x200001b0

08003188 <_isatty_r>:
 8003188:	b538      	push	{r3, r4, r5, lr}
 800318a:	2300      	movs	r3, #0
 800318c:	4d05      	ldr	r5, [pc, #20]	; (80031a4 <_isatty_r+0x1c>)
 800318e:	4604      	mov	r4, r0
 8003190:	4608      	mov	r0, r1
 8003192:	602b      	str	r3, [r5, #0]
 8003194:	f7fd fc7e 	bl	8000a94 <_isatty>
 8003198:	1c43      	adds	r3, r0, #1
 800319a:	d102      	bne.n	80031a2 <_isatty_r+0x1a>
 800319c:	682b      	ldr	r3, [r5, #0]
 800319e:	b103      	cbz	r3, 80031a2 <_isatty_r+0x1a>
 80031a0:	6023      	str	r3, [r4, #0]
 80031a2:	bd38      	pop	{r3, r4, r5, pc}
 80031a4:	200001b0 	.word	0x200001b0

080031a8 <_malloc_usable_size_r>:
 80031a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031ac:	1f18      	subs	r0, r3, #4
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	bfbc      	itt	lt
 80031b2:	580b      	ldrlt	r3, [r1, r0]
 80031b4:	18c0      	addlt	r0, r0, r3
 80031b6:	4770      	bx	lr

080031b8 <_init>:
 80031b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ba:	bf00      	nop
 80031bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031be:	bc08      	pop	{r3}
 80031c0:	469e      	mov	lr, r3
 80031c2:	4770      	bx	lr

080031c4 <_fini>:
 80031c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c6:	bf00      	nop
 80031c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ca:	bc08      	pop	{r3}
 80031cc:	469e      	mov	lr, r3
 80031ce:	4770      	bx	lr
